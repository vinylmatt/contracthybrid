agent FIPACNInitiator extends FIPAContractNet {
    module Console c;
    module EIS ei;
    types cnp_initiator {
        formula participant(string);
        formula awarded(int, string);
        formula worst_performance(int, string, int);
        formula completed(int, boolean);
        
    }

    // DELIBERATION RULES
    rule +contract(int id, string type, list params, int deadline) {
        !awarded(id, string loser);
    }

    // MEANS END REASONING RULES
    rule +!awarded(int id, string loser) : awarded(id, string awardee) {
        loser = awardee;
    }

    rule +!awarded(int id, string loser) : contract(id, string type, list params, int deadline) {
        foreach(participant(string participant)) {
            send(cfp, participant, contract(id, type, params, deadline));
        }

        // Wait till deadline for bids...
        system.sleep(deadline);

        // Find the best bid...      
        foreach(bid(id, string participant, int value)) {
            !worst_performance(id, participant, value);
        }

        // Respond to proposals...
        query(worst_performance(id, string worst_performer, int worst_performance));
        send(accept-proposal, worst_performer, bid(id, worst_performer, worst_performance));
        // Optional: Remove bids (tidying up beliefs generated by the auction)
        -bid(id, worst_performer, worst_performance);
        foreach (participant(string name) & bid(id, name, int bid) & (name ~= worst_performer)) {
            send(reject-proposal, name, bid(id, name, bid));

            // Optional: Remove bids (tidying up beliefs generated by the auction)
            //-bid(id, name, bid);
        }

        // Return name of loser...
        +awarded(id, worst_performer);
        c.println("Performance review is done for the "+id+"th time. "+worst_performer+" is this round's lazy dirtbag.");
        loser = worst_performer;
    }

    /**
     * Default bid assessment strategy bigger == better
     * can be overridden in subclasses...
     */
    rule +!worst_performance(int id, string employee, int value) : 
            worst_performance(id, string worst_performer, int best_value) {
        if (value > best_value) {
            -+worst_performance(id, employee, value);
        }
    }

    rule +!worst_performance(int id, string employee, int value) : 
            contract(id, string type, list params, int deadline) {
        +worst_performance(id, employee, value);
    }

    rule @message(propose, string sender, bid(int id, sender, int value)) : participant(sender) {
        +bid(id, sender, value);
    }

    rule @message(inform, string sender, fulfilled(int id, string type, list params)) {
        !completed(id, true);
    }

    rule @message(failure, string sender, contract(int id, string type, list params, int deadline)) {
        !completed(id, false);
    }

    /**
     * Default behaviour is to adopt the corresponding belief which causes the agent to clear all beliefs
     * This rule can be overriden to introduce more complex handling of failure
     */
     rule +!completed(int id, boolean outcome) {
         +completed(id, outcome);
     }

    // Optional: Removal of all code (including this belief)
    rule +completed(int id, boolean outcome) : 
            contract(id, string type, list params, int deadline) &
             worst_performance(id, string sender, int value) {
         -completed(id, outcome);
        -awarded(id, sender);
        -worst_performance(id, sender, value);
        -contract(id, type, params, deadline);

    }

    /*rule +!orient(long X, long Y,string name) : ei.location(long A, long B) & ei.direction(string direction)  {		

		if (direction == "north") {
			if (name == "left") 			{	A = A-1; 			!performancereport(A,B);	
							
				}
			if (name == "forwardLeft") 		{  A =A-1;	B =B-1;		!performancereport(A,B); 	
							
				}
			if (name == "forward") 			{  B =B-1;  			!performancereport(A,B); 	
							
				}
			if (name == "forwardRight") 	{  A= A+1; B= B-1;		!performancereport(A,B); 	
							
				}
			if (name == "right") 			{  A= A+1; 				!performancereport(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning....  .");			
				}
  			}
			
	    if (direction == "south") {
				if (name == "left") {  				A = A+1; 			!performancereport(A,B);	
								
					}
				if (name == "forwardLeft") 		{  	A= A+1; B= B+1;		!performancereport(A,B); 	
								
					}
				if (name == "forward") 			{  B =B+1;  			!performancereport(A,B); 	
								
					}
				if (name == "forwardRight") 	{  A= A-1; B= B+1;		!performancereport(A,B); 	
								
					}
				if (name == "right") 			{  A= A-1; 				!performancereport(A,B); 	
								
					}
			}


	    if (direction == "east") {		
				if (name == "left") {  				B = B-1; 			!performancereport(A,B);	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning..... ");			
					}
				if (name == "forwardLeft") 		{  	A= A+1;B= B-1;		!performancereport(A,B); 	
								
					}
				if (name == "forward") 			{  A= A+1;	 			!performancereport(A,B); 	
								
					}
				if (name == "forwardRight") 	{  A= A+1;	B= B+1;		!performancereport(A,B); 	
								
					}
				if (name == "right") 			{  B= B+1; 				!performancereport(A,B); 	
						
						}
			}

	    if (direction == "west") {	

				if (name == "left")				{  	B = B+1; 			!performancereport(A,B);	
								
					}
				if (name == "forwardLeft") 		{  	A= A-1;	B= B+1;		!performancereport(A,B); 	
								
					}
				if (name == "forward") 			{  A= A-1;				!performancereport(A,B); 	
								
					}
				if (name == "forwardRight") 	{  A= A-1;	B= B-1;		!performancereport(A,B); 	
								
					}
				if (name == "right") 			{  B= B-1; 				!performancereport(A,B); 	
					
						}
			}
	}*/
}