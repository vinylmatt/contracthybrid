agent VacManager extends FIPACNInitiator {
    module Console c;
	module Math math;
    module System s;
	module EIS ei;
    module Debug d;

 types vac_ontology {
        formula vac(string);
		formula move(string, int );
		formula free(string);
		formula location_status(long, long, string, string);
		formula lastmove(long, long, string);
		formula wall_status(string);
		formula nodust(int);
		formula wallcount(int);
		formula reset(string);
		formula binarychoice(string, string);
		formula fullchoice(string, string, string);
		formula messagecount(int);
		formula makecontract();
		formula orient(int,int,string,string);
		}
     
	initial nodust(0);
	initial wallcount(0);
	initial reset("no");

	inference free(string X) :- ~ei.square(X, "obstacle") & ~ei.square(X, "vac") ;
	inference binarychoice(string X, string Y) :- free(X) & free(Y) ;
	inference fullchoice(string X, string Y, string Z) :- free(X) & free(Y) & free(Z) ;

	initial messagecount(0);

    rule +!main(list args) {

        c.println("Enthusiastic Capitalist is: " + s.name());
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(s.name());
       forall(string arg : args) {
            c.println("Add Participant in Manager." + arg + " . ");
            +participant(arg);
        }
		s.sleep(3000);

    }

rule +!completed(int id, boolean outcome) {
        c.println(".............................................Contact: " + id + " / Outcome: " + outcome);
        FIPACNInitiator::!completed(id, outcome);
    }

rule +$ei.event(task("none")) 
    {


    }

rule +$ei.event(task("move")) 
    {
d.dumpBeliefs();
    }	


rule +$ei.event(task("turn")) 
    {
       

	
    }	

/*this is to catch tasks that are not none or move*/
rule +$ei.event(task(string task)) 
    {


    }


rule +$ei.event(location(long A, long B)) : ei.direction(string direction) & ei.task(string task)
    {
        //c.println("1.1 LOCATION requires DECISION at x= "+ A +". y= "+ B +" direction is "+ direction +" starts on task: "+ task +" GO DECIDE ");
		!decide();
		s.sleep(100);
    }

rule +!makecontract(int x, int y) : messagecount(int tick) {
		int n = 1; 
		n = tick + n;
		c.println("......................................................................Sending message number "+n+"  ");
		-+messagecount(n);
		+contract(n, "test", [], 10000); 
		s.sleep(100);
    }

rule +!decide() : ei.square("here", "dust") & ei.square("right", "dust") & ei.location(long A, long B) & ei.direction(string d) {
		c.println("D1-dust-here-Clean-move-Right  X "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("left", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("D2-D-dusthere-Clean-Left  X "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		!move("left");
    }



rule +!decide() : ei.square("here", "dust") & ei.square("forward", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("D3-dust-here-dust-ahead X "+A+" Y "+B+" facing "+d+" with plan to move forward because is free.");
		ei.light("on");
	    !clean();
		!move("forward");
    }

rule +!decide() : ei.square("here", "dust") & free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("D4-dust-here-empty-forward.");
		ei.light("on");
	    !clean();
		ei.light("off");
		!move("forward");
    }




rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("right") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("D10-D-dusthere- DECIDE RULE Clean HERE exit right ");
		ei.light("on");
	    !clean();
		!move("right");
    }


rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("left")  & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("D11-D-dusthere-10 DECIDE RULE Clean HERE NO WAY FREE IN FRONT exit left ");
		ei.light("on");
	    !clean();
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.location(long A, long B) & lastmove(long X, long Y, string d )  {
		c.println("DEADEND1-D-dusthere-11 deadend ");
		ei.light("on");
	    !clean();
		!move("back");
		c.println("DEADEND2 recording at x "+X+" y "+Y+" d "+d+"...");
		+location_status(X, Y, "deadend", d); 
		c.println("DEADEND3 entrance to DEADEND recorded at "+X+" y "+Y+" d "+d+"...");
		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100); 
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("D12-D-dusthere-11 DECIDE RULE Clean HERE NO WAY FREE IN FRONT, could be other vac ");
		ei.light("on");
	    !clean();
		!move("back");
    }

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust") & ei.square("forwardleft", "dust") {
		c.println("DF1-dustforward-01 Lots of dust ahead all three moving forward. CHOICE OF DUST TO BROADCAST!!!!!.");
		ei.light("on");
		!move("forward");
		s.sleep(100);		
    }

rule +!decide() : ei.square("forward", "dust") & ei.square("left","dust") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("DF4L-dustforward-&left move left");

		ei.light("on");
		+location_status(A, B, "visited", d);
		!move("left");
		ei.light("on");ei.light("off");ei.light("on");ei.light("off");

    }

rule +!decide() : ei.square("forward", "dust") & ei.square("left", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("DF5LD-dustforward-&left move left");

		ei.light("on");
		!orient(A,B,"left");
		+location_status(A, B, "visited", d);
		!move("left");

		ei.light("on");ei.light("off");ei.light("on");ei.light("off");

    }

rule +!decide() : ei.square("forward", "dust") & ei.square("right","dust") & ei.location(long A, long B) & ei.direction(string d) {
		c.println("Df6LD-dustforward-&right move right");
		ei.light("on");
		!orient(A,B,"left");
		+location_status(A, B, "visited", d); 
		!move("right");

		ei.light("on");ei.light("off");ei.light("on");ei.light("off");


    }

rule +!decide() : ei.square("left", "dust") & ei.square("right", "dust") & ei.location(long A, long B) & ei.direction(string d) {
		c.println("DLR7 Dust to left and right ahead we go right");
		ei.light("on");
		!orient(A,B,"left");
		+location_status(A, B, "visited", d); 
		!move("right"); 

    }


rule +!decide() : ei.square("forward", "dust") {
		c.println("DF8-Move forward dust ahead.");
		ei.light("on");
		!move("forward");
		s.sleep(100);

    }

rule +!decide() : ei.square("left", "dust") {
		c.println("DL9 Move left because dust.");
		ei.light("on");
		!move("left");
		s.sleep(100);
		
    }

rule +!decide() : ei.square("right", "dust") {
   
		c.println("DL10 DECIDE Move right for dust.");
		ei.light("on");
		!move("right");
		s.sleep(100);
	
    }
rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & free("right") & ei.location(long A, long B) & ei.direction(string d)
	
	{
   
		c.println("DUSTFL11  Move left to eat dust BUT WE LEFT DUST ON THE TABLE TO THE RIGHT");
		!orient(A, B,"right");
		!orient(A, B,"right");
		!move("left");
		
    }


rule +!decide() :  ei.square("forwardRight","dust")  & free("right") {
 
		c.println("DUSTFL14 Move right to eat dust.");
		ei.light("on");
		!move("right");
    }

/*default forward rule*/
rule +!decide() : fullchoice(string X, string Y, string Z) & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("DC1.1 DEFAULT FORWARD "+ d +". OPEN ROAD *** DEFAULT FORWARD *** at x "+A+" y "+B+" .");
		!dustturn();
		!move("forward");
		+location_status(A, B, "visited", d);
		c.println("DC1.2 DEFAULT FORWARD COMPLETES "+ d +". OPEN ROAD *** DEFAULT FORWARD *** at x "+A+" y "+B+" .");
    }


rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B)  & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E1x "+A+" y "+B+" D-FORK empty here & front direction "+ d +". OPEN ROAD going              *** ALT RIGHT ***  at x "+A+" y "+B+" .");
		!dustturn();
		
		!move("right");
		-location_status(A, B, "visited", d);
    }

rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("left", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d)  {

		c.println("E2x "+A+" y "+B+" d "+ d +" following a LH wall.");
		!dustturn();
		-+wall_status("following");
		!wallcount();
		!move("forward");
    }


rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("right", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ei.square("right", "obstacle") & ~location_status(A, B, "deadend", d) {
       
		c.println("E3x "+A+" y "+B+" d "+ d +" FOLLOWING a RH wall .");
		!dustturn();
		-+wall_status("following");
		!wallcount();
		!move("forward");
    }


rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E4x "+A+" y "+B+" d "+ d +" in open space ?.");
		!dustturn();
		!wallcount();
		!move("forward");
    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E5x "+A+" y "+B+" d "+ d +" FORK IN THE ROAD, going *** DEFAULT LEFT ***.");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E6x "+A+" y "+B+" d "+ d +" FORK IN THE ROAD, going *** ALT RIGHT ***.");
		!dustturn();
		!move("right");
		-location_status(A, B, "visited", d);
		s.sleep(100);

    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)& ~location_status(A, B, "deadend", d) {
       
		c.println("E7x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E8x "+A+" y "+B+" d "+ d +" *** ALT LEFT *** .");
		!dustturn();
		!move("left");
		-location_status(A, B, "visited", d);
		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E9x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E10x "+A+" y "+B+" d "+ d +" *** ALT RIGHT *** .");
		!dustturn();
		!move("right");
		-location_status(A, B, "visited", d);
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E11x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E12x "+A+" y "+B+" d "+ d +" *** FORK ALT LEFT *** .");
		!dustturn();
		!move("left");

		-location_status(A, B, "visited", d);

		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E13x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E14x "+A+" y "+B+" d "+ d +" *** ALT RIGHT *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);
    }



rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E15 x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E16 DEADEND x "+A+" y "+B+" d "+ d +" *** ALT left *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.square("forwardRight", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E17 "+A+" y "+B+" d "+ d +" *** CLEAN WALL DEFAULT RIGHT *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.square("forwardRight", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E18 "+A+" y "+B+" d "+ d +" *** CLEAN WALL ALT LEFT *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);  

    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E19 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT RIGHT *** .");
		!dustturn();
		//mark we have
		+location_status(A, B, "visited", d);
		//moving right
		!move("right");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E20x "+A+" y "+B+" d "+ d +" *** FORK ALT LEFT *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }


rule +!decide() : ei.square("left", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("E21 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT LEFT *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left",  "empty")  {
       
		c.println("ERROR SHOULDNT RUN NO LOCATION DATA Move left because empty. No dead end protection");
		!dustturn();
		!move("left");
		s.sleep(100);
    }


rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.square("forwardRight", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d){
       
		c.println("e22 x "+A+" y "+B+" d "+ d +" *** CLEAN WALL DEFAULT left *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.square("forwardRight", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d){
       
		c.println("e23 x "+A+" y "+B+" d "+ d +" *** CLEAN WALL ALT right *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);  

    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d){
       
		c.println("e24 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT left *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);    
    }




rule +!decide() : ei.square("right", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("e26 x "+A+" y "+B+" d "+ d +" *** FORK ALT right *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);
    }

rule +!decide() : ei.square("right",  "empty")  {
       
		c.println("ERROR SHOULDNT RUN NO LOCATION DATA Move right because empty. No dead end protection");
		!dustturn();
		!move("right");
		s.sleep(100);
    }

rule +!decide() : ei.location(long A, long B) & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.square("forward", "obstacle") & lastmove( long X, long Y, string d ) & ~location_status(A, B, "deadend", d) {
       
		c.println("DEADEND AT x "+A+" y "+B+".");
		!dustturn();
		!move("back");
		c.println("DEADEND recording at x "+X+" y "+Y+" d "+d+"...");
		+location_status(X, Y, "deadend", d); 
		c.println("entrace to DEADEND recorded at "+X+" y "+Y+" d "+d+"...");
		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100);  
    }

rule +!decide() : ei.location(long A, long B) & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.square("forward", "obstacle") & lastmove( long X, long Y, string d )  {
       
		c.println("DEADEND AT x "+A+" y "+B+" ERROR SHOULD NOT RUN.");
		!dustturn();
		!move("back");
		c.println("DEADEND recording at x "+X+" y "+Y+" d "+d+"...");
		+location_status(X, Y, "deadend", d); 
		c.println("entrance to DEADEND recorded at "+X+" y "+Y+" d "+d+"...");
		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100);  

    }

rule +!decide() :  ~free("forward") & ~free("left") & ~free("right") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("x "+A+" y "+B+" d "+ d +" Going Nowhere better go back.");
		!dustturn();
        s.sleep(1000);
		!move("back");
		s.sleep(1000);    
    }


rule +!decide() :  ~free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("x "+A+" y "+B+" d "+ d +" Going Nowhere better decide again.");
		!dustturn();
        s.sleep(1000);
		!decide();
		s.sleep(1000);    
    }
/*get around unfree*/

rule +!decide()  {
       s.sleep(50);
!decide();
    }

rule +!houdini() : ei.location(long A, long B) & ei.direction(string d) & reset("no") {
		c.println("ESCAPE Routine");
		
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		-+location_status(A, B, "visited", d);
	    -location_status(A, B, "visited", d);
		c.println("TOTAL RESET BELIEFS");
		s.sleep(1000);
		-+reset("yes");
		!houdini();
}

rule +!houdini() :  ei.location(long A, long B) & ei.direction(string d) & free("left") & reset("yes") {
		c.println("ESCAPE Routine TRY LEFT");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		c.println("TOTAL RESET BELIEFS now move moving left");
		s.sleep(1000);
		!move("left");
		-+reset("no");
    }

rule +!houdini() :  ei.location(long A, long B) & ei.direction(string d) & free("right") & reset("yes") {
		c.println("ESCAPE Routine try right");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		c.println("TOTAL RESET BELIEFS now move right");
		s.sleep(1000);
		!move("right");
		-reset("no");
    }

rule +!houdini() :  ei.location(long A, long B) & ei.direction(string d) & reset("yes") {
		c.println("ESCAPE Routine moving back");
		
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		s.sleep(1000);
		!move("back");
		-reset("no");
	
    }

/*Robo rule move*/

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & free(direction) & ~location_status(A, B, "deadend", d) {

		c.println("4.0 Move X "+A+" Y "+B+"  direction "+direction+" facing: "+d+".");			
        ei.move(direction);
		s.sleep(100);
		!dustturn();
		-+lastmove(A, B, d);
		!orient(A,B,direction);
		/*???decide+location_status(A, B, "visited", d);*/
	
    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"obstacle") {
		c.println("Move BLOCKED from X "+A+" Y "+B+" in direction "+direction+" when facing."+d+" BY OBSTACLE check prior instruction for mis-percept");	

		s.sleep(1000);
		!dustturn();
		!decide();
    }


rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"vac") {
		c.println("Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". BY A BOT!!!!!!! ");	
			
		s.sleep(3000);
		!dustturn();
		!decide();
    }


rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d)   {
		c.println("Move BLOCKED from X "+A+" Y "+B+" in direction "+direction+" when facing."+d+". by something unexpected ");	

		s.sleep(1000);
		!dustturn();
		!decide();
    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d)  {
		c.println("4.2.1 Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". Did a bot sneak up? Decide 2x");
		s.sleep(1000);
		!dustturn();
		!decide();
		c.println("4.2.2 DECIDE AGAIN "+A+" Y "+B+"  in direction "+direction+" when facing."+d+" after move blocked ");
		s.sleep(1000);
		/*!move("back");*/
		}

rule +!move(string direction)   {
		c.println("ERROR Move BLOCKED in direction "+direction+" with no location or direction info! THis shouldn't happen. Ask Rem");
		!dustturn();
		s.sleep(1000);// randomise so they restart at different times
		!decide();
		s.sleep(1000);
		!dustturn();
		!houdini();
		}

/*nodust-cleaner only */
rule +!dustturn() : nodust(int tick)

	{
		int n = 1; 
		n = tick + n;
		c.println("Nodust count is "+n+"  ");
		-+nodust(n);
    }

/*nodust-cleaner only */
rule +!wallcount() : wallcount(int tick)

	{
		int n = 1; 
		n = tick + n;
		c.println("wallcount is "+n+" . ");
		-+wallcount(n);
    }

/*Robo rules clean*/

rule +!clean() : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d)
    {
        c.println("5.1a cleaning x "+A+" y "+B+" facing "+d+"and reset dust count." );
		ei.clean();
		-+nodust(0);
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);

    }

rule +!clean(string name) : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d) 
    {
        c.println("5.1b cleaning x "+A+" y "+B+" facing "+d+"and reset dust count." );
		ei.clean();
		-+nodust(0);
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) : ei.square("here","dust") 
    {
        c.println("cleaning I shouldn't run but I do anyway" );
		ei.clean();
		-+nodust(0);
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) : ~ei.square("here","dust")
    {
        c.println("No dust to clean forget it" );
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) 
    {
		c.println("ERROR 5.3 Can't clean here makes no sense in this square, houdini from square: " + name +" ." );
		
		!dustturn();
	
		s.sleep(5000);
		!houdini();
		/*s.exit();*/
    }
   
rule +!clean() 
    {
		c.println("ERROR Dust appeared under us most likely houdini " );
		
		ei.clean();
		-+nodust(0);
		ei.light("off");
		s.sleep(50);
		s.sleep(5000);
		!houdini();
	
    }


/*take in observer location, square they're looking at and direction of
observer, and output the square reference for the auction*/
/*orient-manager only */
rule +!orient(long X, long Y,string name) : ei.location(long A, long B) & ei.direction(string direction)  {
        
		//we will return A,B location
		//c.println("2 OBSERVE NORTH square facing  location x = "+ X +" y= "+ Y +". ");			
		
		//c.println("3.1 Pointing "+direction+" x = "+ A +" y= "+ B +"  ");			

		if (direction == "north") {


			if (name == "left") 			{	A = A-1; 			!makecontract(A,B);	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardLeft") 		{  A =A-1;	B =B-1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forward") 			{  B =B-1;  			!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardRight") 	{  A= A+1; B= B-1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "right") 			{  A= A+1; 				!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning....  .");			
				}
			
  			}
			
	if (direction == "south") {

				if (name == "left") {  				A = A+1; 			!makecontract(A,B);	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forwardLeft") 		{  	A= A+1; B= B+1;		!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forward") 			{  B =B+1;  			!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forwardRight") 	{  A= A-1; B= B+1;		!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "right") 			{  A= A-1; 				!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				
			}


	if (direction == "east") {		

				if (name == "left") {  				B = B-1; 			!makecontract(A,B);	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning..... ");			
					}
				if (name == "forwardLeft") 		{  	A= A+1;B= B-1;		!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forward") 			{  A= A+1;	 			!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forwardRight") 	{  A= A+1;	B= B+1;		!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "right") 			{  B= B+1; 				!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");	
						}
				
			}


	if (direction == "west") {	

				if (name == "left")				{  	B = B+1; 			!makecontract(A,B);	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forwardLeft") 		{  	A= A-1;	B= B+1;		!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forward") 			{  A= A-1;				!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "forwardRight") 	{  A= A-1;	B= B-1;		!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
					}
				if (name == "right") 			{  B= B-1; 				!makecontract(A,B); 	
					//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");
						}
			}


	}


}