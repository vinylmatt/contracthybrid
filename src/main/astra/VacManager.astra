agent VacManager extends FIPACNInitiator {
    module Console c;
	module Math math;
    module System s;
	module EIS ei;
    module Debug d;

 types vac_ontology {
        formula vac(string);
		formula move(string, int );
		formula free(string);
		formula lastperfloc(long, long, string);
		formula lastmove(long, long, string);
		formula wall_status(string);
		formula reset(string);
		formula reportrunning(string);
		formula binarychoice(string, string);
		formula fullchoice(string, string, string);
		formula messagecount(int);
		formula performancereport();
		}
     
	initial nodust(0);

	initial reset("no");
	initial reportrunning("no");


	inference free(string X) :- ~ei.square(X, "obstacle") & ~ei.square(X, "vac") ;
	inference binarychoice(string X, string Y) :- free(X) & free(Y) ;
	inference fullchoice(string X, string Y, string Z) :- free(X) & free(Y) & free(Z) ;

	initial messagecount(0);

    rule +!main(list args) {

        c.println("Active Manager is: " + s.name());
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(s.name());
       forall(string arg : args) {
            +participant(arg);
        }
		s.sleep(3000);

    }

rule +!completed(int id, boolean outcome) {

        FIPACNInitiator::!completed(id, outcome);
    }


rule +$ei.event(task("none")) : reset("yes")
    {
	-+reset("no");
    }

rule +$ei.event(task("none")) 
    {    }

rule +$ei.event(task("move")) 
    {

    }	

rule +$ei.event(task("turn")) 
    {
       -+wallcount(0);
    }	

rule +$ei.event(task(string task)) 
    {
     	//c.println("."+ task +"ing starts");
    }


rule +$ei.event(location(long A, long B)) : ei.direction(string direction) & ei.task(string task) 
    {
		//c.println("DECISION DEBUG ONLY at x= "+ A +". y= "+ B +" direction "+ direction +". ");
		!decide();
		s.sleep(10);
	
    }


rule +!performancereport() : messagecount(int tick) & ei.location(long A, long B) & ei.direction(string D) & lastperfloc(A,B,D) & reportrunning("no") {
		c.println("1Can't send a performance review notice from where I was last time. Better decide again before I ask for report");
		-+reportrunning("yes");
		!decide();
		s.sleep(100);
		!performancereport();
		
    }

rule +!performancereport() : messagecount(int tick) & ei.location(long A, long B) & ei.direction(string D) {
		//c.println("Perf report debug current location "+ A +". y= "+ B +" "+ D +".");
		+lastperfloc(A,B,D);
		int n = 1; 
		n = tick + n;
		c.println("Too much dust and I'm not happy, we're going to have our "+n+"th performance review  ");
		-+messagecount(n);
		+review(n, "performancereview", [], 10000); 
		s.sleep(100);
		-+reportrunning("no");
    }
/*Dust rules don't care about deadends, they push the move rules to mark them as visited*/

rule +!decide() : ei.square("here", "dust") & ei.square("right", "dust") & ei.location(long A, long B) & ei.direction(string d) {
		ei.light("on");
	    !clean();
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("left", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("forward");
    }

rule +!decide() : ei.square("here", "dust") & free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		ei.light("off");
		!move("forward");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("frontLeft", "obstacle") & ei.square("frontRight", "obstacle") & free("right") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("right");
		+location_status(A, B, "visited", d);

    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("forwardRight", "dust") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("right");
		+location_status(A, B, "visited", d);
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "vac") & ei.square("forwardRight", "dust") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "dust")  & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("left");
		+location_status(A, B, "visited", d);
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "vac") & ei.square("forwardLeft", "dust")  & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("left");

    }


rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & free("right") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("right");
		+location_status(A, B, "visited", d);
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("right") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("right");
    }


rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("left")  & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.location(long A, long B) & lastmove(long X, long Y, string d )  {
		ei.light("on");
	    !clean();
		-location_status(A, B, "deadend", d);
		-location_status(X, Y, "deadend", d);
		!move("back");
		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100); 
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		ei.light("on");
	    !clean();
		!move("back");
    }


/*near dust rules - move forward*/
rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust") & ei.square("forwardleft", "dust") {
		ei.light("on");
		!move("forward");
		s.sleep(100);		
    }

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust")  {
		ei.light("on");
		!move("forward");
		s.sleep(100);
	}

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardLeft",  "dust")  {
		ei.light("on");
		!move("forward");
		s.sleep(100);
	}

rule +!decide() : ei.square("forwardRight","dust") & ei.square("forwardLeft",  "dust") & free("forward")   {
		//c.println(".DF4dustforward-03 2x Lots of dust ahead so drive into the gap.");
		ei.light("on");
		!move("forward");
		s.sleep(100);


	}


rule +!decide() : ei.square("forward", "dust") & ei.square("left","dust") & ei.location(long A, long B) & ei.direction(string d)  {

		!performancereport();
		ei.light("on");
		+location_status(A, B, "visited", d);
		!move("left");
		ei.light("on");ei.light("off");ei.light("on");ei.light("off");

    }

rule +!decide() : ei.square("forward", "dust") & ei.square("left", "dust") & ei.location(long A, long B) & ei.direction(string d)  {

		ei.light("on");
		!performancereport();
		+location_status(A, B, "visited", d);
		!move("left");

		ei.light("on");ei.light("off");ei.light("on");ei.light("off");

    }

rule +!decide() : ei.square("forward", "dust") & ei.square("right","dust") & ei.location(long A, long B) & ei.direction(string d) {

		ei.light("on");
		!performancereport();
		+location_status(A, B, "visited", d); 
		!move("right");

		ei.light("on");ei.light("off");ei.light("on");ei.light("off");


    }

rule +!decide() : ei.square("left", "dust") & ei.square("right", "dust") & ei.location(long A, long B) & ei.direction(string d) {

		ei.light("on");
		!performancereport();
		+location_status(A, B, "visited", d); 
		!move("right"); 

    }


rule +!decide() : ei.square("forward", "dust") {

		ei.light("on");
		!move("forward");
		s.sleep(100);

    }

rule +!decide() : ei.square("left", "dust") {

		ei.light("on");
		!move("left");
		s.sleep(100);
		
    }

rule +!decide() : ei.square("right", "dust") {
   

		ei.light("on");
		!move("right");
		s.sleep(100);
	
    }
rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & free("right") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) 
	
	{
   
		+location_status(A, B, "visited", d);
		!performancereport();
		!move("left");
		
    }

	rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & ~free("right") {
   
		ei.light("on");
		!move("left");

    }




rule +!decide() : ei.square("forwardLeft","dust") & free("left") {
   
		ei.light("on");
		!move("left");

    }

rule +!decide() :  ei.square("forwardRight","dust")  & free("right") {
 

		ei.light("on");
		!move("right");
    }

/*default forward rule*/
rule +!decide() : fullchoice(string X, string Y, string Z) & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println(".DC1.1 DEFAULT FORWARD "+ d +". OPEN ROAD *** DEFAULT FORWARD *** at x "+A+" y "+B+" .");
		
		!move("forward");
		+location_status(A, B, "visited", d);
	  }

rule +!decide() : ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println(".DC1.2"+ d +". OPEN ROAD *** ALT RIGHT *** at x "+A+" y "+B+" .");
		
		-location_status(A, B, "visited", d);
		!move("right");

    }

rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B)  & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" D-FORK empty here & front direction "+ d +". OPEN ROAD going   *** ALT RIGHT ***  at x "+A+" y "+B+" .");
		!dustturn();
		
		!move("right");
		-location_status(A, B, "visited", d);
    }


rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("right", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       

		!move("forward");


    }


rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
	
	
	
		!move("forward");


    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println(".E5x "+A+" y "+B+" d "+ d +" FORK IN THE ROAD, going *** DEFAULT LEFT ***.");
		
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("ALT "+A+" y "+B+" d "+ d +" FORK IN THE ROAD going RIGHT.");
		
		!move("right");
		-location_status(A, B, "visited", d);
		s.sleep(100);

    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)& ~location_status(A, B, "deadend", d) {
       
		//c.println(".E7x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		c.println("ALT "+A+" y "+B+" d "+ d +"  LEFT .");
		
		!move("left");
		-location_status(A, B, "visited", d);
		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("ALT "+A+" y "+B+" d "+ d +" *** RIGHT *** .");
		
		!move("right");
		-location_status(A, B, "visited", d);
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println(".x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("ALT "+A+" y "+B+" d "+ d +" *** FORK LEFT *** .");
		
		!move("left");

		-location_status(A, B, "visited", d);

		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("ALT "+A+" y "+B+" d "+ d +" *** RIGHT *** .");
		
		-location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);
    }



rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
	
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		
		+location_status(A, B, "visited", d);
		!move("forward");

		+choicereport (A, B, d);

		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("DEADEND x "+A+" y "+B+" d "+ d +" *** ALT left *** .");
		
		-location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.square("forwardRight", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** CLEAN WALL DEFAULT RIGHT *** .");
		
		+location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.square("forwardRight", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x  "+A+" y "+B+" d "+ d +" *** CLEAN WALL ALT LEFT *** .");
		
		-location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);  

    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT RIGHT *** .");
		+location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** FORK ALT LEFT *** .");
		-location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }


rule +!decide() : ei.square("left", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT LEFT *** .");
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left",  "empty")  {
       
		!move("left");
		s.sleep(100);
    }


rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.square("forwardRight", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d){
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** CLEAN WALL DEFAULT left *** .");
		
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.square("forwardRight", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d){
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** CLEAN WALL ALT right *** .");
		
		-location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);  

    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d){
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT left *** .");
	
		+location_status(A, B, "visited", d);

		!move("left");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT right *** .");
		
		-location_status(A, B, "visited", d);

		!move("right");
		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" *** FORK ALT right *** .");
		
		-location_status(A, B, "visited", d);
		!move("right");
		s.sleep(100);
    }

rule +!decide() : ei.square("right",  "empty")  {
       

		!move("right");
		s.sleep(100);
    }

rule +!decide() : ei.location(long A, long B) & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.square("forward", "obstacle") & lastmove( long X, long Y, string d ) & ei.direction(d) & ~location_status(A, B, "deadend", d) {
       
		+location_status(X, Y, "deadend", d); 
		!move("back");
		s.sleep(100);  
    }

rule +!decide() : ei.location(long A, long B) & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.square("forward", "obstacle") & lastmove( long X, long Y, string d )  {
       
		!move("back");
		+location_status(X, Y, "deadend", d); 
		s.sleep(100);  

    }

rule +!decide() :  ~free("forward") & ~free("left") & ~free("right") & ei.location(long A, long B) & ei.direction(string d) {
       
		//c.println("x "+A+" y "+B+" d "+ d +" Going Nowhere better go back.");
        s.sleep(10);
		!move("back");
		//c.println("Moved Back, decide again");
		s.sleep(10);   
		!decide(); 
    }


rule +!decide() :  ~free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("x "+A+" y "+B+" d "+ d +" Going Nowhere better decide again.");
		
		!dustturn();
        s.sleep(10);
		!decide();
		s.sleep(10);  
    }
/*get around unfree*/

rule +!decide()  {
	//c.println("Last decision rule, discarded");
       s.sleep(50);
	   /*!decide();*/
    }

rule +!zap() : ei.location(long A, long B) & ei.direction(string d) & reset("no") {
		c.println("RESET Routine Initiated 1");

		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		-+location_status(A, B, "visited", d);
	    -location_status(A, B, "visited", d);
		c.println("TOTALLY RESET VISITED BELIEFS");
		s.sleep(1000);
		-+reset("yes");
		!zap();

}

rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & free(d) & reset("yes") {
		c.println("RESET Routine 2 TRY MOVING IN the dir I'm pointing which is "+d+" .");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		
		s.sleep(1000);
		!move(d);
		-+reset("no");
		c.println("RESET BELIEFS success moved in existing dir" +d+ ".");

    }
rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & free("left") & reset("yes") {
		c.println("RESET Routine 3 TRY LEFT");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		
		s.sleep(1000);
		!move("left");
		-+reset("no");
		c.println("RESET BELIEFS success moved left");
	
    }


rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & free("right") & reset("yes") {
		c.println("RESET Routine 4 try right");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		
		s.sleep(1000);
		!move("right");
		-+reset("no");
		c.println("RESET BELIEFS success moved right");
    }

rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & reset("yes") {
		c.println("RESET Routine 5 moving back");
		
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		!move("back");
		-+reset("no");
		c.println("RESET BELIEFS success moved back");
		
	
	
    }
	
rule +!zap()  {
	c.println("unsuccessful reset, go again");
	-+reset("yes");
	!zap();
    }



/*Robo rule move*/

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & free(direction) {
		
        ei.move(direction);
		s.sleep(10);
		!dustturn();
		-+lastmove(A, B, d);
		-+reset("no");

    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"obstacle") {
		c.println("Move BLOCKED from X "+A+" Y "+B+" in direction "+direction+" when facing."+d+" BY OBSTACLE check prior instruction for mis-percept");	

		s.sleep(1000);
		
		!decide();
    }


rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"vac") {
		c.println("Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". BY A BOT!!!!!!! ");	
			
		s.sleep(3000);
		
		!decide();
    }




rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & reset("no")  {
		c.println("UNEXPECTED BLOCK from X "+A+" Y "+B+" in direction "+direction+" when facing."+d+".");	

	
        -+reset("yes");
		!decide(); 
		-+reset("no");

    }
rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & reset("yes") {
		c.println("Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". While in Reset mode ");

		-+reset("no");
		!zap();

		}

rule +!move(string direction)   {
		c.println("ERROR Move BLOCKED in direction "+direction+" with no location or direction info! THis shouldn't happen. Ask Rem");
	
		s.sleep(10);
		!decide();/*try removing this decide*/
		s.sleep(10);
		
		!zap();
		}

/*Robo rules clean*/

rule +!clean() : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d)
    {
        c.println("A Cleaning x "+A+" y "+B+" facing "+d+"." );
		ei.clean();
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);

    }

rule +!clean(string name) : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d) 
    {
        c.println("B cleaning x "+A+" y "+B+" facing "+d+"." );
		ei.clean();
		
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) : ei.square("here","dust") 
    {
        c.println("...................................................cleaning I shouldn't run but I do anyway" );
		ei.clean();
		
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) : ~ei.square("here","dust")
    {
        c.println("..........................................................No dust to clean forget it" );
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) 
    {
		c.println(".......................ERROR 5.3 Can't clean here makes no sense in this square, zap from square: " + name +" ." );
		
		s.sleep(75);
		!zap();

    }
   
rule +!clean() 
    {

	
    }



}