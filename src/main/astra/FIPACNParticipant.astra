agent FIPACNParticipant extends FIPAContractNet {

    types cnp_participant {
        formula accepted(int /* contract_id*/, string /*awarder*/);
        formula rejected(int /* contract_id*/, string /*awarder*/);
    }

    rule +deadendreport (long X, long Y, string d) {
        c.println("...TX " +X+" and " +Y+ "and " +d+" in a deadend message to coordinator.");
        send(inform, "Henry", deadendreport(X,Y,d));
    }


    rule +choicereport (long X, long Y, string d) {
        //c.println("...TX " +X+" and " +Y+ "and " +d+" in a choice message to coordinator.");
        send(inform, "Henry", choicereport(X,Y,d));
    }

 
    rule @message(inform, string sender, deadendreport(long X, long Y, string d)) {
        
        +location_status(X, Y, "deadend", d);
        c.println(".....RX x" +X+" y" +Y+ "and " +d+" in a message about deadends. ");

    }
    

    rule @message(inform, string sender, choicereport(long X, long Y, string d)) {
        
        +location_status(X, Y, "visited", d);
        c.println(".....RX x" +X+" y" +Y+ "and " +d+" in a message about choice. and added 4 dustturns ");
        !dustturn();
        !dustturn();
        !dustturn();
        !dustturn();

    }

    // COMMUNUCATION RULES
    rule @message(cfp, string sender, contract(int id, string type, list params, int deadline)) {
        
        +contract(id, type, params, deadline);

        try {
            !bid(id, string name, int score);

            send(propose, sender, bid(id, name, score));
        } recover {
            send(refuse, sender, contract(id, type, params, deadline));
        }
    }

    rule @message(accept-proposal, string sender, bid(int id, system.name(), int score)) : contract(id, string type, list params, int deadline) {
        +accepted(id, sender);
        try {
            !fulfil(id, type, params);
            send(inform, sender, fulfilled(id, type, params));
        } recover {
            send(failure, sender, contract(id, type, params, deadline));
        }
    }

    rule @message(reject-proposal, string sender, bid(int id, system.name(), int score)) : contract(id, string type, list params, int deadline) {
        +rejected(id, sender);
    }

    rule +!bid(int id, string name, int score) {
        !generate_bid(id, int my_score);
        
        name = system.name();
        score = my_score;
        +bid(id, name, score);
    }
    
    rule +!generate_bid(int id, int score) : contract(id, string type, list params, int deadline) {
        system.fail();
    }

    rule +!fulfil(int id, string type, list params) {
        system.fail();
    }




}