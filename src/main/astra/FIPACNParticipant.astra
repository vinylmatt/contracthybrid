agent FIPACNParticipant extends FIPAContractNet {

    types cnp_participant {
        formula accepted(int /* contract_id*/, string /*awarder*/);
        formula rejected(int /* contract_id*/, string /*awarder*/);
    }

    rule +deadendreport (long X, long Y, string d) {
        c.println("TX " +X+" and " +Y+ " and " +d+" in a deadend message to coordinator.");
        send(inform, "Henry", deadendreport(X,Y,d));
    }


    rule +choicereport (long X, long Y, string d) {
        c.println("TX " +X+" and " +Y+ " and " +d+" in a choice message to coordinator.");
        send(inform, "Henry", choicereport(X,Y,d));
    }

    rule +abundancereport (long X, long Y, string d) {
        c.println("TX " +X+" and " +Y+ " and " +d+" in a abundancereport message to coordinator.");
        send(inform, "Henry", abundancereport(X,Y,d));
    }

    rule +otherchoicereport (long X, long Y, string d) {
        c.println("TX " +X+" and " +Y+ " and " +d+" in a otherchoicereport message to coordinator.");
        send(inform, "Henry", otherchoicereport(X,Y,d));
    }
 
    rule @message(inform, string sender, deadendreport_echo(long X, long Y, string d)) {
        
        +location_status(X, Y, "deadend", d);
        c.println("RX MSG that x" +X+" y" +Y+ " in dir " +d+" is a deadend. ");

    }
    

    rule @message(inform, string sender, choicereport_echo(long X, long Y, string d)) {
        
        +location_status(X, Y, "visited", d);
        c.println("RX x" +X+" y" +Y+ " and " +d+" choicereport_echo message ");
        !dustturn();!dustturn();!dustturn();!dustturn();!dustturn();!dustturn();
        //there's a cost!

    }

    rule @message(inform, string sender, otherchoicereport_echo(long X, long Y, string d)) {
        
        -location_status(X, Y, "visited", d);
        c.println("RX x" +X+" y" +Y+ " and " +d+" otherchoicereport_echo message ");
        !dustturn();!dustturn();!dustturn();!dustturn();!dustturn();!dustturn();
 

    }

 
    rule @message(cfp, string sender, contract(int id, string type, list params, int deadline)) {
        
        +contract(id, type, params, deadline);

        try {
            //c.println("status_report running");
            !status_report(id, string name, int score);

            send(propose, sender, status_report(id, name, score));
        } recover {
            c.println("refuses never runs");
            send(refuse, sender, contract(id, type, params, deadline));
        }
    }

    rule @message(accept-proposal, string sender, status_report(int id, system.name(), int score)) : contract(id, string type, list params, int deadline) {
        +accepted(id, sender);
        try {
            c.println("Reset command accepted");
            !fulfil(id, type, params);
            c.println("Inform manager fulfilled");
            send(inform, sender, fulfilled(id, type, params));
        } recover {
            c.println("Fulfil error");
            send(failure, sender, contract(id, type, params, deadline));
        }
    }

    rule @message(reject-proposal, string sender, status_report(int id, system.name(), int score)) : contract(id, string type, list params, int deadline) {
        c.println("Rejected Proposal");
        +rejected(id, sender);
    }

    rule +!status_report(int id, string name, int score) {
        //c.println("Generating status report");
        !generate_status_report(id, int my_score);

        name = system.name();
        score = my_score;
        +status_report(id, name, score);
    }
    

    rule +!fulfil(string id, "performancereview", []) {
		c.println("I really sucked in manager's "+id+"th round of performance reviews! Going for reeducation...");
		!zap();
		c.println("Reeducation complete.");
    }




}