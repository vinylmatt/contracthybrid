agent FIPACNParticipant extends FIPAContractNet {
    types cnp_participant {
        formula accepted(int /* contract_id*/, string /*awarder*/);
        formula rejected(int /* contract_id*/, string /*awarder*/);
    }

    // COMMUNUCATION RULES
    rule @message(cfp, string sender, contract(int id, string type, list params, int deadline)) {
        
        +contract(id, type, params, deadline);

        try {
            !bid(id, string name, int value);

            send(propose, sender, bid(id, name, value));
        } recover {
            send(refuse, sender, contract(id, type, params, deadline));
        }
    }

    rule @message(accept-proposal, string sender, bid(int id, system.name(), int value)) : contract(id, string type, list params, int deadline) {
        +accepted(id, sender);
        try {
            !fulfil(id, type, params);
            send(inform, sender, fulfilled(id, type, params));
        } recover {
            send(failure, sender, contract(id, type, params, deadline));
        }
    }

    rule @message(reject-proposal, string sender, bid(int id, system.name(), int value)) : contract(id, string type, list params, int deadline) {
        +rejected(id, sender);
    }

    rule +!bid(int id, string name, int value) {
        !generate_bid(id, int my_value);
        
        name = system.name();
        value = my_value;
        +bid(id, name, value);
    }
    
    rule +!generate_bid(int id, int value) : contract(id, string type, list params, int deadline) {
        system.fail();
    }

    rule +!fulfil(int id, string type, list params) {
        system.fail();
    }
}