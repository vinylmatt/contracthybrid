agent VacCleaner extends FIPACNParticipant {    
    module Console c;
	module Math math;
    module System s;
	module EIS ei;
    module Debug d;

	 types vac_ontology {
        formula vac(string);
		formula move(string, int );
		formula free(string);

		formula lastmove(long, long, string);
		formula wall_status(string);
		formula nodust(int);

		formula reset(string);
		formula binarychoice(string, string);
		formula fullchoice(string, string, string);
		}

	initial nodust(0);

	initial reset("no");

	inference free(string X) :- ~ei.square(X, "obstacle") & ~ei.square(X, "vac") ;
	inference binarychoice(string X, string Y) :- free(X) & free(Y) ;
	inference fullchoice(string X, string Y, string Z) :- free(X) & free(Y) & free(Z) ;

	
	
	rule +!main([string name]) {
		c.println("Heroic worker is: " + s.name());
        //c.println("in network with members: " + name);
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(s.name());
		s.sleep(200);
    }


/*Cleaner Only rules*/
    rule +!generate_bid(int id, int value) : contract(id, "performancereview", [], int deadline) & nodust(int dustturn) {
       
		value = dustturn;
	
    }

    rule +!fulfil(string id, "performancereview", []) {
		//c.println("I really sucked in manager's "+id+"th round of performance reviews! Going for retraining...");
		d.dumpBeliefs();
		!zap();
		//c.println("That was refreshing, where am I?");
    }


rule +$ei.event(task("none")) : reset("yes")
    {
    //c.println("TASK where TASK NONE during RESET! Totally Stuck here ");
	-+reset("no");
	/*s.exit();	
	!decide();*/

	
    }

rule +$ei.event(task("none")) 
    {
    //c.println("REM ADVICE: TASK where TASK NONE DO NOTHING ");
	
		
	//c.println("REM ADVICE: DECIDED TASK COMPLETE DO NOTHING");
	
    }

rule +$ei.event(task("move")) 
    {
		//c.println("DEBUG move operation result");
		//ei.dumpState();

    }	

rule +$ei.event(task("turn")) 
    {
       -+wallcount(0);		
    }	
/*this is to catch tasks that are not none or move*/
rule +$ei.event(task(string task)) 
    {
     	//c.println(""+ task +"ing STARTS DO NOTHING");

    }


rule +$ei.event(location(long A, long B)) : ei.direction(string direction) & ei.task(string task)
    {
        //c.println("1.1 LOCATION requires DECISION at x= "+ A +". y= "+ B +" direction is "+ direction +" starts on task: "+ task +" GO DECIDE ");
		!decide();
		s.sleep(100);
    }



rule +!decide() : ei.square("here", "dust") & ei.square("right", "dust") & ei.location(long A, long B) & ei.direction(string d) {
		//c.println("D1-dust-here-Clean-move-Right  X "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.square("left", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D2-D-dusthere-Clean-Left  X "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		!move("left");
    }



rule +!decide() : ei.square("here", "dust") & ei.square("forward", "dust") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D3-dust-here-dust-ahead X "+A+" Y "+B+" facing "+d+" with plan to move forward because is free.");
		ei.light("on");
	    !clean();
		!move("forward");
    }

rule +!decide() : ei.square("here", "dust") & free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D4-dust-here-empty-forward.");
		ei.light("on");
	    !clean();
		ei.light("off");
		!move("forward");
    }



/*remember lie of land in here*/
rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("frontLeft", "obstacle") & ei.square("frontRight", "obstacle") & free("right") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D5-dust-here-wall ahead.CHOICE RECORDED LR : R");
		ei.light("on");
	    !clean();
		!move("right");
		+location_status(A, B, "visited", d);

    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("forwardRight", "dust") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D6-dusthere-5 Choice of paths-rightdust is there");
		ei.light("on");
	    !clean();
		!move("right");
		+location_status(A, B, "visited", d);
    }

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "vac") & ei.square("forwardRight", "dust") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D6-dustherevac in the way we go right because the dust is there");
		ei.light("on");
	    !clean();
		!move("right");
    }

/*remember lie of land in here*/
rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "dust")  & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D8 D-dusthere-6 Choice of paths around this block but we go left because the dust is there");
		ei.light("on");
	    !clean();
		!move("left");
		+location_status(A, B, "visited", d);
    }

/*remember lie of land in here*/
rule +!decide() : ei.square("here", "dust") & ei.square("forward", "vac") & ei.square("forwardLeft", "dust")  & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D8 D-dusthere-6 Choice of paths around this vac but we go left because the dust is there");
		ei.light("on");
	    !clean();
		!move("left");

    }


rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & free("right") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D9-D-dusthere-7 Choice of paths around this block or wall, we're going right but there is a choice ");
		ei.light("on");
	    !clean();
		!move("right");
		+location_status(A, B, "visited", d);
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("right") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D10-D-dusthere- DECIDE RULE Clean HERE exit right ");
		ei.light("on");
	    !clean();
		!move("right");
    }


rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("left")  & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D11-D-dusthere-10 DECIDE RULE Clean HERE NO WAY FREE IN FRONT exit left ");
		ei.light("on");
	    !clean();
		!move("left");
    } 

rule +!decide() : ei.square("here", "dust") & ei.square("forward", "obstacle") & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.location(long A, long B) & lastmove(long X, long Y, string d )  {
		//c.println("DEADEND1-D-dusthere-11 deadend ");
		ei.light("on");
	    !clean();
		-location_status(A, B, "deadend", d);
		-location_status(X, Y, "deadend", d);
		!move("back");

		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100); 
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("D12-D-dusthere-11 RULE Clean HERE NO WAY FREE IN FRONT, could be other vac ");
		ei.light("on");
	    !clean();
		!move("back");
    }


/*near dust rules - move forward*/
rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust") & ei.square("forwardleft", "dust") {
		//c.println("DF1-dustforward-01 Lots of dust ahead all three moving forward. CHOICE OF DUST TO BROADCAST!!!!!.");
		ei.light("on");
		!move("forward");
		s.sleep(100);		
    }

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust")  {
		//c.println("DF2-dustforward-02 2x Lots of dust ahead and right forward.");
		ei.light("on");
		!move("forward");
		s.sleep(100);
	}

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardLeft",  "dust")  {
		//c.println("DF3-dustforward-03 2x Lots of dust ahead and left forward.");
		ei.light("on");
		!move("forward");
		s.sleep(100);


	}

rule +!decide() : ei.square("forwardRight","dust") & ei.square("forwardLeft",  "dust") & free("forward")   {
		//c.println("DF4dustforward-03 2x Lots of dust ahead so drive into the gap. do I ever run?");
		ei.light("on");
		!move("forward");
		s.sleep(100);


	}


rule +!decide() : ei.square("forward", "dust") & ei.square("left","dust") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("DF4L-dustforward-&left move left");

		ei.light("on");
		+location_status(A, B, "visited", d);
		!move("left");
		ei.light("on");ei.light("off");ei.light("on");ei.light("off");

    }

rule +!decide() : ei.square("forward", "dust") & ei.square("left", "dust") & ei.location(long A, long B) & ei.direction(string d)  {

		ei.light("on");
		+location_status(A, B, "visited", d);
		!move("left");

		ei.light("on");ei.light("off");ei.light("on");ei.light("off");

    }

rule +!decide() : ei.square("forward", "dust") & ei.square("right","dust") & ei.location(long A, long B) & ei.direction(string d) {

		ei.light("on");
		+location_status(A, B, "visited", d); 
		!move("right");

		ei.light("on");ei.light("off");ei.light("on");ei.light("off");


    }

rule +!decide() : ei.square("left", "dust") & ei.square("right", "dust") & ei.location(long A, long B) & ei.direction(string d) {

		ei.light("on");
		+location_status(A, B, "visited", d); 
		!move("right"); 

    }


rule +!decide() : ei.square("forward", "dust") {
		//c.println("DF8-Move forward dust ahead.");
		ei.light("on");
		!move("forward");
		s.sleep(100);

    }

rule +!decide() : ei.square("left", "dust") {
		//c.println("DL9 Move left because dust.");
		ei.light("on");
		!move("left");
		s.sleep(100);
		
    }

rule +!decide() : ei.square("right", "dust") {
   
		//c.println("DL10 DECIDE Move right for dust.");
		ei.light("on");
		!move("right");
		s.sleep(100);
	
    }
rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & free("right") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) 
	
	{
   
		//c.println("DUSTFL11  Move left to eat dust BUT WE LEFT DUST ON THE TABLE TO THE RIGHT");
		+location_status(A, B, "visited", d);
		!move("left");
		
    }

	rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & ~free("right") {
   
		//c.println("DUSTFL12  Move left to eat easy dust BUT WE SAW DUST we couldn't get to! Sell this in the other agent");
		ei.light("on");
		!move("left");
		//c.println("2.8.2.2 Moved left BUT WE SAW DUST we couldn't get to right. We could have sold it.");
    }




rule +!decide() : ei.square("forwardLeft","dust") & free("left") {
   
		//c.println("DUSTFL13  Move left to eat dust");
		ei.light("on");
		!move("left");

    }

rule +!decide() :  ei.square("forwardRight","dust")  & free("right") {
 
		//c.println("DUSTFL14 Move right to eat dust.");
		ei.light("on");
		!move("right");
    }

/*default forward rule*/
rule +!decide() : fullchoice(string X, string Y, string Z) & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("DC1.1 DEFAULT FORWARD "+ d +". OPEN ROAD *** DEFAULT FORWARD *** at x "+A+" y "+B+" .");
		!dustturn();
		!move("forward");
		+location_status(A, B, "visited", d);
		+choicereport (A, B, d);
	}

rule +!decide() : ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("DC1.2"+ d +". OPEN ROAD *** ALT RIGHT *** at x "+A+" y "+B+" .");
		!dustturn();
		-location_status(A, B, "visited", d);
		!move("right");
		+otherchoicereport (A, B, d);

    }

rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B)  & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E1x "+A+" y "+B+" D-FORK empty here & front direction "+ d +". OPEN ROAD going              *** ALT RIGHT ***  at x "+A+" y "+B+" .");
		!dustturn();
		
		!move("right");
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
    }
/*wall following dectection*/
rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("left", "obstacle") & free("right") & ei.location(long A, long B) & ei.direction(string d) & wallcount(3) & ~location_status(A, B, "deadend", "right")  {

		//c.println("BREAK FREE FROM WALL at "+A+" y "+B+" d "+ d +" following a LH wall by going RIGHT.");
		!dustturn();
		-wall_status("following");
		!move("right");
    }

rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("left", "obstacle")  & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d)  {

		//c.println("x "+A+" y "+B+" d "+ d +" following a LH wall. ");
		!dustturn();
		-+wall_status("following");
		!wallcount();
		!move("forward");
    }

rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("right", "obstacle") & free("left") & ei.location(long A, long B) & ei.direction(string d) & wallcount(3) & ei.square("right", "obstacle") & ~location_status(A, B, "deadend", d) {
       
		//c.println("BREAK FREE FROM WALL FOLLOWING E2x "+A+" y "+B+" d "+ d +" following a RH wall by going LEFT.");
		!dustturn();
		-wall_status("following");
		!move("left");

    }

rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.square("right", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ei.square("right", "obstacle") & ~location_status(A, B, "deadend", d) {
       
		//c.println("E3x "+A+" y "+B+" d "+ d +" FOLLOWING a RH wall .");
		!dustturn();
		-+wall_status("following");
		!wallcount();
		!move("forward");
		//c.println("2.11.2 Moved forward in direction "+ d +" .");

    }


rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E4x "+A+" y "+B+" d "+ d +" in open space ?.");
		!dustturn();
		!wallcount();
		!move("forward");


    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E5x "+A+" y "+B+" d "+ d +" FORK IN THE ROAD, going *** DEFAULT LEFT ***.");

		!dustturn();
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
		+choicereport (A, B, d);
	}

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E6x "+A+" y "+B+" d "+ d +" FORK IN THE ROAD, going *** ALT RIGHT ***.");

		!dustturn();
		!move("right");
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		s.sleep(100);

    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)& ~location_status(A, B, "deadend", d) {
       
		//c.println("E7x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		+choicereport (A, B, d);
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E8x "+A+" y "+B+" d "+ d +" *** ALT LEFT *** .");
		!dustturn();
		!move("left");
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E9x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		+choicereport (A, B, d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E10x "+A+" y "+B+" d "+ d +" *** ALT RIGHT *** .");
		!dustturn();
		!move("right");
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		s.sleep(100);
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E11x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		/*testOnly*/
		+choicereport (A, B, d);
		/*testOnly*/
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E12x "+A+" y "+B+" d "+ d +" *** FORK ALT LEFT *** .");
		!dustturn();
		!move("left");

		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		s.sleep(100);
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E13x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		+choicereport (A, B, d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E14x "+A+" y "+B+" d "+ d +" *** ALT RIGHT *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("right");
		s.sleep(100);
    }



rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E15 x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		s.sleep(100);    
    }

rule +!decide() : free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("just plain old forwARD x "+A+" y "+B+" d "+ d +" *** DEFAULT FORWARD *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("forward");
		/*testOnly*/
		+choicereport (A, B, d);
		/*testOnly*/
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E16 DEADEND x "+A+" y "+B+" d "+ d +" *** ALT left *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("left");
		s.sleep(100);
    }




/*get around obstacles*/
rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.square("forwardRight", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E17 "+A+" y "+B+" d "+ d +" *** CLEAN WALL DEFAULT RIGHT *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		/*testOnly*/
		+choicereport (A, B, d);
		/*testOnly*/
		!move("right");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.square("forwardRight", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E18 "+A+" y "+B+" d "+ d +" *** CLEAN WALL ALT LEFT *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("left");
		s.sleep(100);  

    }
/*sample alt routine for demo*/
/*if we haven't visited*/
rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E19 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT RIGHT *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		+choicereport (A, B, d);
		!move("right");
		s.sleep(100);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E20x "+A+" y "+B+" d "+ d +" *** FORK ALT LEFT *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("left");
		s.sleep(100);
    }


rule +!decide() : ei.square("left", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("E21 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT LEFT *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		!move("left");
		s.sleep(100);
    }

rule +!decide() : ei.square("left",  "empty")  {
       
		//c.println("ERROR SHOULDNT RUN NO LOCATION DATA Move left because empty. No dead end protection");
		!dustturn();
		!move("left");
		s.sleep(100);
    }


rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.square("forwardRight", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d){
       
		//c.println("e22 x "+A+" y "+B+" d "+ d +" *** CLEAN WALL DEFAULT left *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		+choicereport (A, B, d);
		!move("left");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.square("forwardRight", "obstacle") & ei.square("forwardLeft", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d){
       
		//c.println("e23 x "+A+" y "+B+" d "+ d +" *** CLEAN WALL ALT right *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("right");
		s.sleep(100);  

    }





rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) & ~location_status(A, B, "deadend", d){
       
		//c.println("e24 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT left *** .");
		!dustturn();
		+location_status(A, B, "visited", d);
		/*testOnly*/
		+choicereport (A, B, d);
		/*testOnly*/
		!move("left");
		s.sleep(100);    
    }

rule +!decide() : ei.square("right", "empty") & ei.square("left", "empty") & ei.square("forward", "obstacle") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("e25 x "+A+" y "+B+" d "+ d +" *** FORK DEFAULT right *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("right");
		s.sleep(100);
    }


rule +!decide() : ei.square("right", "empty") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "deadend", d) {
       
		//c.println("e26 x "+A+" y "+B+" d "+ d +" *** FORK ALT right *** .");
		!dustturn();
		-location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		!move("right");
		s.sleep(100);
    }

rule +!decide() : ei.square("right",  "empty")  {
       
		c.println("ERROR SHOULDNT RUN NO LOCATION DATA Move right because empty. No dead end protection");
		!dustturn();
		!move("right");
		s.sleep(100);
    }

/*Deadend detect rule below*//*Deadend rule below*/
rule +!decide() : ei.location(long A, long B) & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.square("forward", "obstacle") & lastmove( long X, long Y, string d ) & ~location_status(A, B, "deadend", d) {
       
		c.println("DEADEND physically AT x "+A+" y "+B+".");
		!dustturn();
		c.println("DEADEND entrance  at x "+X+" y "+Y+" d "+d+" recorded for me");
		+location_status(X, Y, "deadend", d); 

		!move("back");
		+deadendreport (X, Y, d);
		c.println("DEADEND Entrance recorded at "+X+" y "+Y+" d "+d+"...");
		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100);  
    }

rule +!decide() : ei.location(long A, long B) & ei.square("left", "obstacle") & ei.square("right", "obstacle") & ei.square("forward", "obstacle") & lastmove( long X, long Y, string d )  {
       
		c.println("DEADEND AT x "+A+" y "+B+" ERROR SHOULD NOT RUN.");
		!dustturn();
		!move("back");
		//c.println("DEADEND recording at x "+X+" y "+Y+" d "+d+"...");
		+location_status(X, Y, "deadend", d); 
		//c.println("entrance to DEADEND recorded at "+X+" y "+Y+" d "+d+"...");
		//we should leave here pointing in other direction so we should still be able to use the square just not in that direction.
		s.sleep(100);  

    }
/*Deadend rule above*/

/*get around unfree*/
rule +!decide() :  ~free("forward") & ~free("left") & ~free("right") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("x "+A+" y "+B+" d "+ d +" Going Nowhere better go back.");
		!dustturn();
        s.sleep(1000);
		!move("back");
		s.sleep(1000);    
		!decide(); 
    }


rule +!decide() :  ~free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("x "+A+" y "+B+" d "+ d +" Going Nowhere better decide again.");
		!dustturn();
        s.sleep(1000);
		!decide();
		s.sleep(1000);    
    }
/*get around unfree*/

rule +!decide()  {
		c.println(" Last decision rule, decide again OR ZAP");
       s.sleep(50);
		/*!decide();*/
		!zap();
    }

rule +!zap() : ei.location(long A, long B) & ei.direction(string d) & reset("no") {
		c.println("RESET Routine Initiated 1");

		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		-+location_status(A, B, "visited", d);
	    -location_status(A, B, "visited", d);
		+otherchoicereport (A, B, d);
		c.println("TOTALLY RESET VISITED BELIEFS");
		-+nodust(0);
		c.println("ResetDust");
		s.sleep(1000);
		-+reset("yes");
		!zap();

}

rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & free(d) & reset("yes") {
		c.println("RESET Routine 2 TRY MOVING IN the dir I'm pointing which is "+d+" .");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		
		s.sleep(1000);
		!move(d);
		-+reset("no");
		c.println("RESET BELIEFS success moved in existing direction " +d+ ".");

    }
rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & free("left") & reset("yes") {
		c.println("RESET Routine 3 TRY LEFT");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		
		s.sleep(1000);
		!move("left");
		-+reset("no");
		c.println("RESET BELIEFS success moved left");
	
    }


rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & free("right") & reset("yes") {
		c.println("RESET Routine 4 try right");
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		
		s.sleep(1000);
		!move("right");
		-+reset("no");
		c.println("RESET BELIEFS success moved right");
    }

rule +!zap() :  ei.location(long A, long B) & ei.direction(string d) & reset("yes") {
		c.println("RESET Routine 5 moving back");
		
		s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");s.sleep(100);ei.light("off");s.sleep(100);ei.light("on");
		!move("back");
		-+reset("no");
		c.println("RESET BELIEFS success moved back");
		
	
	
    }

rule +!zap()  {
		c.println("FATAL ERROR....unsuccessful reset exit in 10");
			/*	d.dumpBeliefs();
		ei.dumpState();
		s.exit();
	*/
	-+reset("yes");
	!zap();	
    }



/*Robo rule move*/

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & free(direction) {

		//c.println("4.0 Move X "+A+" Y "+B+"  direction "+direction+" facing: "+d+".");			
        -+lastmove(A, B, d);
		ei.move(direction);
		s.sleep(100);
		!dustturn();

		
		-+reset("no");

	
    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"obstacle") {
		//c.println("Move BLOCKED from X "+A+" Y "+B+" in direction "+direction+" when facing."+d+" BY OBSTACLE check prior instruction for mis-percept");	

		s.sleep(1000);
		!dustturn();
		!decide();
    }


rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"vac") {
		c.println("Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". BY A BOT!!!!!!! ");	
			
		s.sleep(3000);
		!dustturn();
		!decide();
    }


rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & reset("no")  {
		//c.println("UNEXPECTED BLOCK from X "+A+" Y "+B+" in direction "+direction+" when facing."+d+".");	

		s.sleep(1000);
		!dustturn();
        -+reset("yes");
		!decide();
		-+reset("no");
    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & reset("yes") {
		c.println("Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". was reset yes so zap ");
		s.sleep(1000);	
		!dustturn();
		-+reset("no");
		!zap();
		s.sleep(1000);

		}

rule +!move(string direction)   {
		c.println("ERROR Move BLOCKED in direction "+direction+" with no location or direction info! THis shouldn't happen. Ask Rem");
		!dustturn();
		s.sleep(1000);// randomise so they restart at different times
		!decide();
		s.sleep(1000);
		!dustturn();
		!zap();
		}

/*nodust-cleaner only */
rule +!dustturn() : nodust(int tick)

	{
		int n = 1; 
		n = tick + n;
		//c.println("Nodust count is "+n+"  ");
		-+nodust(n);
    }

/*nodust-cleaner only */


/*Robo rules clean*/

rule +!clean() : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d)
    {
        //c.println("5.1a cleaning x "+A+" y "+B+" facing "+d+"and reset dust count." );
		ei.clean();
		-+nodust(0);
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);

    }
	


rule +!clean(string name) : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d) 
    {
        //c.println("5.1b cleaning x "+A+" y "+B+" facing "+d+"and reset dust count." );
		ei.clean();
		-+nodust(0);
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) : ei.square("here","dust") 
    {
        //c.println("cleaning I shouldn't run but I do anyway" );
		ei.clean();
		-+nodust(0);
		-+wallcount(0);
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) : ~ei.square("here","dust")
    {
        //c.println("No dust to clean forget it" );
		ei.light("off");
		s.sleep(50);
    }

rule +!clean(string name) 
    {
		//c.println("ERROR 5.3 Can't clean here makes no sense in this square, zap from square: " + name +" ." );
		
		!dustturn();
	
		s.sleep(75);
		!zap();
		/*s.exit();*/
    }
   
rule +!clean() 
    {


	
    }
   




}