agent VacCleaner extends FIPACNParticipant {    
    module Console c;
	module Math math;
    module System s;
	module EIS ei;
    module Debug d;

	 types vac_ontology {
        formula vac(string);
		formula move(string, int );
		formula location_status(long, long, string);
		formula mylocation(int, int, string); 
		formula manager(string);
		formula free(string);

	 }


	inference free(string X) :- ~ei.square(X, "obstacle") & ~ei.square(X, "vac");
	
	rule +!main([string name]) {
		c.println("Sullen worker is: " + s.name());
        c.println("and is in comms to: " + name);
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
		+manager(name);
        ei.join();
        ei.link(s.name());
    }
/*I want to make a bid and have postion!*/
    rule +!generate_bid(int id, int value) : contract(id, "test", [], int deadline) & mylocation(int myA, int myB,string d) & ei.location(long A, long B) {
        c.println("I know position so I can generate bid for id " +id+ " the deadline " + deadline +" . ");
		value = myA + myB;
		//this returns but nothing below does, ask why.
    
    }

/*I want to make a bid but no postion!*/
    rule +!generate_bid(int id, int value) : contract(id, "test", [], int deadline) & ei.location(long A, long B) & ei.direction(string d) {
        c.println("I didn't know where I was so I need to update position to do better that I did on bid id " +id+ " with  deadline " + deadline +" . ");
		long myA = A;
		long myB = B;
		//find my location
		!mylocation(myA,myB,d);
		//so I need separate call to cast, or could I make one
	
    }

rule +!mylocation(int myA, int myB, string d)  
	{
		c.println("Update local position belief A coordinates " +myA+ "B coordinates " +myB+ " facing" +d+ "");
		-+mylocation(myA,myB,d);
		/*d.dumpBeliefs();*/
	}

    rule +!fulfil(int id, "test", []) {
        c.println("I got a fulfilling the contract message for ID " +id+ "...");
    }


    rule +$ei.event(task("none")) 
    {
       /* //c.println("DEBUG ONLY DECIDE TASK where TASK NONEDO NOTHING ");
		//c.println("DEBUG ONLY DECIDED TASK COMPLETE DO NOTHING");*/
	
    }

rule +$ei.event(task("move"))
    {
       // c.println(" DEBUG ONLY move operation result make update ");

		//c.println("DEBUG ONLY move operation update completed");
    }	

/*rule +$ei.event(task("none")) : ei.location(long A, long B) & ei.direction(string d) 
    {
        c.println(" move operation result make update ");
		long myA = A;
		long myB = B;
	  !mylocation(myA,myB,d);
		c.println("move operation update completed");
    }	*/


rule +$ei.event(task("turn")) 
    {
       
	  //c.println("DEBUG ONLY TURN operation result DO NOTHING");
		//c.println("DEBUG ONLY TURN operation result DO NOTHING");*/
    }	

/*this is to catch tasks that are not none or move*/
rule +$ei.event(task(string task)) 
    {
     /*   //c.println("DEBUG ONLY MSG from TASK: "+ task +"ing STARTS............. DO NOTHING");
		//c.println("DEBUG ONLY MSG from TASK:  "+ task +"ing ENDS. DID NOTHING");*/
    }


rule +$ei.event(location(long A, long B)) : ei.direction(string direction) & ei.task(string task)
    {
        //c.println("1.1 LOCATION requires DECISION at x= "+ A +". y= "+ B +" direction is "+ direction +" starts on task: "+ task +" GO DECIDE ");*/
		!decide();
		s.sleep(10);
		//c.println("1.2 LOCATION DECISION COMPLETE Event at x="+ A +". y= "+ B +" direction is "+ direction +" on task: "+ task +" DECIDED AND completed. ");*/

    }

/*here is dust rules*/

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & ei.square("right", "dust") {
		//c.println(".2.1.1 DECIDE RULE Clean X "+A+" Y "+B+" facing "+d+".");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.2  DECIDE RULE Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a right move ....");*/
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & ei.square("left", "dust") {
		//c.println(".2.1.3 DECIDE RULE Clean X "+A+" Y "+B+" facing "+d+".");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.4  DECIDE RULE Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a left move ");*/
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & free("forward") {
		//c.println(".2.1.5 DECIDE RULE Clean X "+A+" Y "+B+" facing "+d+" with plan to move forward because is free.");
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.6  DECIDE RULE Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a forward move .");
		!move("forward");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") & ~free("frontLeft") & ~free("frontLeftright") & free("right") & free("left") {
		//c.println("2.1.7 we've come up against a dirty wall...any turn is possible, we're going right CHOICE!");
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(" "+A+" Y "+B+"  .");
		!move("right");
		//c.println("2.1.8 we came up against a dirty wall...any turn was possible, we went right ");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") & ei.square("forwardRight", "dust") & free("left") {
		//c.println(".2.1.9 Choice of paths around this block but we go right because the dust is there");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.10 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");*/
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") & ei.square("forwardLeft", "dust") & free("left") {
		//c.println(".2.1.11 Choice of paths around this block but we go left because the dust is there");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.12 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");*/
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") & free("right") & free("left") {
		//c.println(".2.1.13 Choice of paths around this block, we're going right but there is a choice ");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.14 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+" now moving right... .");*/
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") & free("right") {
		//c.println(".2.1.15 DECIDE RULE Clean HERE NO WAY FREE IN FRONT exit right ");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.16 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");*/
		!move("right");
    }


rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") & free("left") {
		//c.println(".2.1.17 DECIDE RULE Clean HERE NO WAY FREE IN FRONT exit left ");*/
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.18 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");*/
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ~free("forward") {
		//c.println(".2.1.19 DECIDE RULE Clean HERE NO WAY FREE IN FRONT ");
		ei.light("on");
	    !clean();
		-+location_status(A, B, "cleaned");
		//c.println(".2.1.20 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");
		!move("back");
    }


/*near dust rules*/

    rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust") & ei.square("forwardleft", "dust") {
		//c.println("2.5.0 Lots of dust ahead all three moving forward. CHOICE OF DUST TO BROADCAST!!!!!.");
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println("2.5.1 Moved forward");*/
		
    }

	rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust")  {
		//c.println(".2.5.2 2x Lots of dust ahead and right forward.");*/
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println(".2.5.3 Moved forward");*/
	}

	rule +!decide() : ei.square("forward", "dust") & ei.square("forwardLeft", "dust")  {
		//c.println(".2.5.4 2x Lots of dust ahead and left forward.");*/
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println(".2.5.5 Moved forward");*/

	}

    rule +!decide() : ei.square("forward", "dust") & ei.square("left", "dust") {
		//c.println(".2.5.6L Move forward dust ahead. But we left dust to our left on the table SELL IT");
		
		
		/*Send message with free dust*/
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println(".2.5.6L LEFT Moved forward");
		

    }

	rule +!decide() : ei.square("forward", "dust") & ei.square("right", "dust") {
		//c.println(".2.5.6R Move forward dust ahead. But we left dust to our right on the table SELL IT ");
		ei.light("on");
		!move("forward"); 
		s.sleep(10);
		//c.println(".2.5.6R Moved forward");
		

    }

	rule +!decide() : ei.square("forward", "dust") {
		//c.println(".2.5.6 Move forward dust ahead.");*/
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println(".2.5.7 Moved forward");*/
		

    }

    rule +!decide() : ei.square("left", "dust") {
		//c.println(".2.6.1 Move left because dust.");*/
		ei.light("on");
		!move("left");
		s.sleep(10);
		//c.println(".2.6.2 Moved left ");*/
		
    }

    rule +!decide() : ei.square("right", "dust") {
   
		//c.println(".2.7.2 DECIDE Move right for dust.");*/
		ei.light("on");
		!move("right");
		s.sleep(10);
		//c.println(".2.7.3 Moved right for dust.");*/
	
    }

    
	rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & free("right"){
   
		//c.println("2.8.1.1  Move left to eat dust BUT WE DUST ON THE TABLE TO THE RIGHT SELL IT");
		/*mark this dust for others*/
		ei.light("on");
		!move("left");
		//c.println("2.8.1.2 Moved left DUST ON THE TABLE TO THE RIGHT");

    }

	rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & ~free("right"){
   
		//c.println("2.8.2.1  Move left to eat easy dust BUT WE SAW DUST we couldn't get to! SELL IT");
		ei.light("on");
		!move("left");
		//c.println("2.8.2.2 Moved left BUT WE SAW DUST we couldn't get to right. We could have sold it.");

    }




	rule +!decide() : ei.square("forwardLeft","dust") & free("left") {
   
		//c.println(".2.8.1  Move left to eat dust");*/
		ei.light("on");
		!move("left");
		//c.println(".2.8.2 Moved left to put dust to my right");*/

    }

    rule +!decide() :  ei.square("forwardRight","dust")  & free("right") {
 
		//c.println(".2.9.1 Move right to eat dust.");*/
		ei.light("on");
		!move("right");
		//c.println(".2.9.2 Moved right .");*/

    }


        rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited") {
       
		//c.println(".2.10.1 empty here & front so move forward in direction "+ d +". OPEN ROAD GOING FORWARD THERE IS CHOICE for next time");
		!move("forward");
		//c.println(".2.10.2 Moved forward in direction "+ d +" but there was choice.");

    }

    rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B)  & ei.direction(string d) {
       
		//c.println(".2.10.2 empty here & front pointing in direction "+ d +". OPEN ROAD going right for a change");
		!move("right");
		-location_status(A, B, "visited");
		//c.println(".2.10.2 Moved right when pointing in direction "+ d +" but there was choice. next time it will be left");

    }


    rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.location(long A, long B) & ei.direction(string d) {
       
		//c.println(".2.11.1 empty here & front so move forward in direction "+ d +" .");*/
		!move("forward");
		//c.println(".2.11.2 Moved forward in direction "+ d +" .");*/

    }

/*new fork in road catch works with EMPTH right and left*/
    rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ~location_status(A, B, "visited") {
       
		//c.println("2.12.1 FORK IN THE ROAD, going LEFT");
		/*mark this as a choice and take the other road next time*/
		!move("left");
		s.sleep(10);
		//c.println("2.12.2 Moved left, but right possible too at this fork in road, if we see it again ");

    }

	rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) {
       
		//c.println("2.12.1 FORK IN THE ROAD, going RIGHT");
		/*mark this as a choice and take the other road next time*/
		!move("right");
		-location_status(A, B, "visited");
		s.sleep(10);
		//c.println("2.12.2 Moved right, becasue we went left before ");

    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ei.location(long A, long B) & ~location_status(A, B, "visited")  {
       
		//c.println("2.12.1 A clean wall and a choice of ways out ...... we're picking right ");
		!move("right");
		s.sleep(10);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ei.location(long A, long B)  {
       
		//c.println("2.12.2 A clean wall and a choice of ways out .but we've done the other way already... we're picking LEFT THIS TIME ");
		/*mark our chioce and flip flop*/
		!move("left");
		-location_status(A, B, "visited");
		s.sleep(10);

    }
    rule +!decide() : ei.square("left", "empty") {
       
		//c.println(".2.13.1 DECIDED TO Move left becasue empty.");*/
		!move("left");
		s.sleep(10);


    }

    rule +!decide() : ei.square("right", "empty") {
    
		//c.println(".3.1.1 DECIDED TO Move right because right was empty");*/
		!move("right");
		s.sleep(10);



    }

    /*rule +!decide() : ei.square("forward", "empty") {
 
		//c.println("3.2.1 DECIDED TO Move forward.");
		!move("forward");
		//c.println("3.2.2 Moved forward");

    }*/

    rule +!decide()  {
		//c.println(".3.3.1 DECIDED TO BACKUP.");
        !move("back");
		//c.println(".3.3.2 DECIDED TO BACKUP.");
		s.sleep(10);
		
    }


/*Robo rule clean*/

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & free(direction) {

		//c.println(".4.0 Move from X "+A+" Y "+B+" facing: "+d+" moving in direction "+direction+" .");*/
        ei.move(direction);
		s.sleep(10);
		+location_status(A, B, "visited");
		//c.println("4.1 Moved from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+" complete");*/
	
    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d) & ei.square(d,"obstacle") {
		//c.println("4.1 DEBUG ONLY Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". Did a bot sneak up? Backup beep beep beep");
		s.sleep(1000);
		!move("back");
    }

rule +!move(string direction) : ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("4.2 UNCAUGHT DEBUG ONLY Move BLOCKED from X "+A+" Y "+B+"  in direction "+direction+" when facing."+d+". Did a bot sneak up. Did a bot sneak up? Backup beep beep beep");
		s.sleep(1000);
		!move("back");
    }   


/*Robo rules clean*/

rule +!clean() : ei.square("here","dust")
    {
        //c.println(".5.1 cleaning ." );*/
		ei.clean();
		ei.light("off");
		s.sleep(50);
		
		//c.println("5.2 cleaned." );*/
    }
	






/*rule +!clean(string name) : ~ei.square("here","dust")
    {
        //c.println("DEBUG ONLY 5.3 Drop Non Clean Square " + name +" ." );
    }

rule +!clean(string name) 
    {
        //c.println("DEBUG ONLY 5.3 Can't clean here makes no sense in this square: " + name +" ." );

    }*/
   





}