agent VacManager extends FIPACNInitiator {
    module Console c;
	module Math math;
    module System s;
	module EIS ei;
    module Debug d;

 types vac_ontology {
        formula vac(string);
		formula move(string, int );
		formula messagecount(int);
		formula makecontract();
		formula location_status(long, long, string, string);
		formula orient(int,int,string,string);
		formula free(string);
		formula manager(string);
	 }
     
	inference free(string X) :- ~ei.square(X, "obstacle") & ~ei.square(X, "vac");
	initial messagecount(0);

    rule +!main(list args) {

        //c.println("Enthusiastic Capitalist is: " + s.name());
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(s.name());
        s.sleep(200);

        forall(string arg : args) {
            //c.println("Add Participant in Manager." + arg + " . ");
            +participant(arg);
        }
		s.sleep(3000);
        

    }


    

    
    rule +!completed(int id, boolean outcome) {
        c.println(".............................................Contact: " + id + " / Outcome: " + outcome);
        FIPACNInitiator::!completed(id, outcome);
    }

  rule +$ei.event(task("none")) 
    {
       //c.println("DEBUG ONLY DECIDE TASK where TASK NONEDO NOTHING ");
		//c.println("DEBUG ONLY DECIDED TASK COMPLETE DO NOTHING");
	
    }

rule +$ei.event(task("move")) 
    {
        //c.println("DEBUG ONLY move operation result DO NOTHING");
		//c.println("DEBUG ONLY move operation result DO NOTHING");
    }	

rule +$ei.event(task("turn")) 
    {
       
	  	//c.println("DEBUG ONLY TURN operation result DO NOTHING");
		//c.println("DEBUG ONLY TURN operation result DO NOTHING");
    }	

/*this is to catch tasks that are not none or move*/
rule +$ei.event(task(string task)) 
    {
     	//c.println("TASK: "+ task +"ing STARTS  DO NOTHING");
		//c.println("TASK:  "+ task +"ing ENDS. DID NOTHING");
    }


rule +$ei.event(location(long A, long B)) : ei.direction(string direction) & ei.task(string task)
    {
        //c.println("1.1 LOCATION requires DECISION at x= "+ A +". y= "+ B +" direction is "+ direction +" starts on task: "+ task +" GO DECIDE ");
		!decide();
		s.sleep(10);
		//c.println("1.2 LOCATION DECISION COMPLETE Event at x="+ A +". y= "+ B +" direction is "+ direction +" on task: "+ task +" DECIDED AND completed. ");
    }


/*signalling*/
rule +!makecontract(int x, int y) : messagecount(int tick) {
		int n = 1; 
		n = tick + n;
		c.println("......................................................................Sending message number "+n+"  ");
		-+messagecount(n);
		+contract(n, "test", [], 10000); 
		s.sleep(100);
}


/*here is dust rules*/
rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & ei.square("right", "dust") {
		c.println("Decide-dusthere-Clean-Right  X "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.2  Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a right move ....");
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & ei.square("left", "dust") {
		c.println("Decide-dusthere-Clean-Left  X "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.4  Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a left move ");
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & ei.square("forward", "dust") {
		c.println("Decide-dusthere-Clean-Forward NEW NEW NEW "+A+" Y "+B+" facing "+d+".");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.4  Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a left move ");
		!move("forward");
    }

/*clean and move on*/
rule +!decide() : ei.square("here", "dust") & ei.location(long A, long B) & ei.direction(string d) & free("forward") {
		//c.println("Decide-dusthere-3  RULE Clean X "+A+" Y "+B+" facing "+d+" with plan to move forward because is free.");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.6  DECIDE RULE Cleaned X "+A+" Y "+B+" facing in direction: "+d+" ordering a forward move .");
		!move("forward");
    }




/*on dust rules*/
rule +!decide() : ei.square("here", "dust") & ~free("forward") & ~free("frontLeft") & ~free("frontLeftright") & free("right") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("Decide-dusthere-4 we've come up against a dirty wall...any turn is possible, we're going right CHOICE!");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println(" "+A+" Y "+B+"  .");
		!move("right");
		//c.println("2.1.8 we came up against a dirty wall...any turn was possible, we went right ");
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & ei.square("forwardRight", "dust") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("Decide-dusthere-5 Choice of paths around this block but we go right because the dust is there");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.10 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & ei.square("forwardLeft", "dust")  & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("Decide-dusthere-6 Choice of paths around this block but we go left because the dust is there");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.12 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("right") & free("left") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("Decide-dusthere-7 Choice of paths around this block, we're going right but there is a choice ");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.14 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+" now moving right... .");
		!move("right");
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("right") & ei.location(long A, long B) & ei.direction(string d)  {
		c.println("Decide-dusthere-8 DECIDE RULE Clean HERE NO WAY FREE IN FRONT exit right ");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.16 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");
		!move("right");
    }


rule +!decide() : ei.square("here", "dust") & ~free("forward") & free("left")  & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("Decide-dusthere-10 DECIDE RULE Clean HERE NO WAY FREE IN FRONT exit left ");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.18 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");
		!move("left");
    }

rule +!decide() : ei.square("here", "dust") & ~free("forward") & ei.location(long A, long B) & ei.direction(string d)  {
		//c.println("Decide-dusthere-11 DECIDE RULE Clean HERE NO WAY FREE IN FRONT ");
		ei.light("on");
	    !clean();
		/*-+location_status(A, B, "visited", d);*/
		//c.println("2.1.20 DECIDE RULE 1.2 Cleaned HERE "+A+" Y "+B+"  .");
		!move("back");
    }

/*near dust rules*/

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust") & ei.square("forwardleft", "dust") {
		//c.println("Decide-dustforward-01 Lots of dust ahead all three moving forward. CHOICE OF DUST TO BROADCAST!!!!!.");
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println("2.5.1 Moved forward");
		
    }

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardRight", "dust")  {
		//c.println("Decide-dustforward-02 2x Lots of dust ahead and right forward.");
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println("2.5.3 Moved forward");
	}

rule +!decide() : ei.square("forward", "dust") & ei.square("forwardLeft",  "dust")  {
		c.println("Decide-dustforward-03 2x Lots of dust ahead and left forward.");
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println("2.5.5 Moved forward");

	}
/*Manager Different*/
    rule +!decide() : ei.square("forward", "dust") & ei.square("left", "dust") & ei.location(long X, long Y) & ei.direction(string direction) {
		c.println("2.5.6l Move forward dust ahead. But we left dust to our left on the table SELL IT");			
		!orient(X,Y,"left");
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println("2.5.6L LEFT Moved forward");
		

    }

/*Manager Different*/
	rule +!decide() : ei.square("forward", "dust") & ei.square("right", "dust") & ei.location(long X, long Y) & ei.direction(string direction) {
		//c.println("2.5.6r Move forward dust ahead. But we left dust to our right on the table SELL IT ");
		!orient( X, Y,"right");
		ei.light("on");
		!move("forward"); 
		s.sleep(10);
		//c.println("2.5.7r Moved forward");
		

    }

	rule +!decide() : ei.square("forward", "dust") {
		//c.println("2.5.6 Move forward dust ahead.");
		ei.light("on");
		!move("forward");
		s.sleep(10);
		//c.println("2.5.7 Moved forward");
		

    }

    rule +!decide() : ei.square("left", "dust") {
		//c.println("2.6.1 Move left because dust.");
		ei.light("on");
		!move("left");
		s.sleep(10);
		//c.println("2.6.2 Moved left ");
		
    }

    rule +!decide() : ei.square("right", "dust") {
   
		//c.println("2.7.2 DECIDE Move right for dust.");
		ei.light("on");
		!move("right");
		s.sleep(10);
		//c.println("2.7.3 Moved right for dust.");
	
    }

/*Manager Different*/    
	rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & free("right") & ei.location(long X, long Y)  {
   
		c.println("Move left to eat dust DUST SALE");
		!orient(X,Y,"forwardRight");
		ei.light("on");
		!move("left");
		//c.println("2.8.1.2 Moved left DUST ON THE TABLE TO THE RIGHT");

    }
/*Manager Different*/  
	rule +!decide() : ei.square("forwardLeft","dust") & free("left") & ei.square("forwardRight","dust") & ~free("right") & ei.location(long X, long Y) & ei.direction(string direction) {
   
		c.println("2.8.1.3  Move left to eat easy dust BUT WE SAW DUST we couldn't get so we SELL IT");
		!orient(X,Y,"forwardRight");
		ei.light("on");
		!move("left");
		//c.println("2.8.2.4 Moved left to put dust to my right");

    }


	rule +!decide() : ei.square("forwardLeft","dust") & free("left") {
   
		//c.println("2.8.1  Move left to eat dust");
		ei.light("on");
		!move("left");
		//c.println("2.8.2 Moved left to put dust to my right");

    }

    rule +!decide() :  ei.square("forwardRight","dust")  & free("right") {
 
		//c.println("2.9.1 Move right to eat dust.");
		ei.light("on");
		!move("right");
		//c.println("2.9.2 Moved right .");

    }
/*default forward rule*/
rule +!decide() : ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) {
       
		c.println("Decide-empty here & front "+ d +". OPEN ROAD GOING                             *** DEFAULT FORWARD *** at x "+A+" y "+B+" .");
		
		!move("forward");
		//c.println("2.10.2 Moved forward in direction "+ d +" but there was choice.");
    }

rule +!decide() : ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d)  {
       
		c.println("Decide-empty here & front "+ d +". OPEN ROAD GOING   NEW NEW  *** ALT RIGHT *** OPTIONS TO INTO HERE FORWARD TOO *** at x "+A+" y "+B+" .");
		
		!move("right");
		-location_status(A, B, "visited", d);
		//c.println("2.10.2 Moved forward in direction "+ d +" but there was choice.");
    }

    rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & free("right") & free("left") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B)  & ei.direction(string d) {
       
		c.println("Decide-FORK empty here & front direction "+ d +". OPEN ROAD going              *** ALT RIGHT ***  at x "+A+" y "+B+" .");
		
		-location_status(A, B, "visited", d);
		!move("right");
		
		//c.println("2.10.2 Moved right when pointing in direction "+ d +" but there was choice. next time it will be forward");
    }

    rule +!decide() : ei.square("here", "empty") & ei.square("forward", "empty") & ei.location(long A, long B) & ei.direction(string d) {
       
		//c.println("2.11.1 empty here & front so move forward in direction "+ d +" .");
		
		!move("forward");
		//c.println("2.11.2 Moved forward in direction "+ d +" .");

    }


    rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d) {
       
		c.println("FORK IN THE ROAD, going                                         *** DEFAULT LEFT *** at x "+A+" y "+B+" in direction "+d+" .");
		/*mark this as a choice and take the other road next time*/
		
		!move("left");
		s.sleep(10);
		//c.println("2.12.2 Moved left, but right possible too at this fork in road, if we see it again ");
    }

	rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & free("forwardLeft") & free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("FORK IN THE ROAD, going                                          *** ALT RIGHT ***  at x "+A+" y "+B+" in direction "+d+" .");
		/*mark this as a choice and take the other road next time*/
		
		-location_status(A, B, "visited", d);
		!move("right");
		
		s.sleep(10);
		//c.println("2.12.2 Moved right, becasue we went left before ");
    }




/*added rule and could add more above*/
rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("  NEW NEW NEW NEW        *** DEFAULT FORWARD ***  at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("forward");
		s.sleep(10);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("2.12.2.1    NEW NEW NEW NEW               *** ALT LEFT *** THIS TIME at x "+A+" y "+B+" .");
		
		!move("left");
		//c.println("2.12.3.1 MOVED LEFT");
		/*mark our choice and flip flop*/
		-location_status(A, B, "visited", d);
		//c.println("2.12.4.1 reset choice LEFT");
		s.sleep(10);
    }
/*added rule ends */
/*added rule and could add more above*/
rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING     NEW NEW NEW NEW        *** DEFAULT RIGHT ***  at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("forward");
		s.sleep(10);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("2.12.2.1 FORK Clean wall choice NEW NEW NEW NEW   *** ALT RIGHT *** THIS TIME at x "+A+" y "+B+" .");
		
		!move("right");
		//c.println("2.12.3.1 MOVED LEFT");
		/*mark our choice and flip flop*/
		-location_status(A, B, "visited", d);
		//c.println("2.12.4.1 reset choice LEFT");
		s.sleep(10);
    }
/*added rule ends */
/*added rule and could add more above*/
rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING     NEW NEW NEW NEW        *** DEFAULT FORWARD ***  at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("forward");
		s.sleep(10);    
    }

rule +!decide() : ei.square("left", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("2.12.2.1 FORK Clean wall choice        NEW NEW NEW NEW               *** ALT LEFT *** THIS TIME at x "+A+" y "+B+" .");
		
		!move("left");
		//c.println("2.12.3.1 MOVED LEFT");
		/*mark our choice and flip flop*/
		-location_status(A, B, "visited", d);
		//c.println("2.12.4.1 reset choice LEFT");
		s.sleep(10);
    }
/*added rule ends */
rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING     NEW NEW NEW NEW        *** DEFAULT FORWARD ***  at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("forward");
		s.sleep(10);    
    }

rule +!decide() : ei.square("right", "empty") & free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("FORK Clean wall choice        NEW NEW NEW NEW               *** ALT RIGHT ***  at x "+A+" y "+B+" .");
		
		!move("right");
		//c.println("2.12.3.1 MOVED LEFT");
		/*mark our choice and flip flop*/
		-location_status(A, B, "visited", d);
		//c.println("2.12.4.1 reset choice LEFT");
		s.sleep(10);
    }
/*added rule ends */

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ~free("forwardLeft") & ~free("forwardRight") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING                            *** DEFAULT RIGHT ***  at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("right");
		s.sleep(10);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ~free("forwardLeft") & ~free("forwardRight")& ei.location(long A, long B) & ei.direction(string d)  {
       
		c.println("Clean wall and choice of ways out GOING                            *** ALT LEFT ***  at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("left");
		-location_status(A, B, "visited", d);
		s.sleep(10);  

    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ~free("forwardLeft") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING     NEW NEW NEW              at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("right");
		s.sleep(10);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ~free("forwardright") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING     NEW NEW NEW               at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("right");
		s.sleep(10);    
    }


rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ei.location(long A, long B) & ei.direction(string d) & ~location_status(A, B, "visited", d)  {
       
		c.println("Clean wall and choice of ways out GOING                             at x "+A+" y "+B+" in direction "+d+" .");
		
		!move("right");
		s.sleep(10);    
    }

rule +!decide() : ei.square("left", "empty") & ei.square("right", "empty") & ~free("forward") & ei.location(long A, long B) & ei.direction(string d) {
       
		c.println("2.12.2.1 FORK Clean wall choice                                         *** ALT LEFT *** THIS TIME at x "+A+" y "+B+" .");
		
		!move("left");
		//c.println("2.12.3.1 MOVED LEFT");
		/*mark our choice and flip flop*/
		-location_status(A, B, "visited", d);
		//c.println("2.12.4.1 reset choice LEFT");
		s.sleep(10);
    }
rule +!decide() : ei.square("left",  "empty") {
       
		//c.println("2.13.1 DECIDED TO Move left because empty.");
		
		!move("left");
		s.sleep(10);
		//c.println("2.13.2 Moved left ");

    }

rule +!decide() : ei.square("right", "empty") {
    
		//c.println("3.1.1 DECIDED TO Move right because right was empty");
		!move("right");
		s.sleep(10);
		//c.println("3.1.2 Moved right.");


    }

	rule +!decide() : ~free("forward")  & ~free("left")  & ~free("right")  {
    
		c.println("3.2.1 Trapped and need to go back");
		s.sleep(500);
		!move("back");
		c.println("3.2.2 Moved BACK.");


    }

    rule +!decide()  {
		c.println("3.3.1 ERROR BECAUSE NO OTHER DECISIONS we are in the hole DECIDE AGAIN");
		s.sleep(1000);
		d.dumpBeliefs();
		s.sleep(1000);
		ei.dumpState();
		s.sleep(1000);
		c.println("3.3.2 wait 10 to decide");
		s.sleep(1000);
		!decide();
    }
	/*Robo rules clean*/

rule +!clean() : ei.square("here","dust") & ei.location(long A, long B) & ei.direction(string d)
    {
        //c.println("5.1 cleaning x "+A+" y "+B+" facing "+d+"and reset dust count." );
		ei.clean();

		/*lose all beliefs*/
		-+location_status(A, B, "cleaned", d);
		ei.light("off");
		s.sleep(50);
		
		//c.println("5.2 cleaned x "+A+" y "+B+" facing "+d+" and reset dust count." );

  }

/*take in observer location, square they're looking at and direction of
observer, and output the square reference for the auction*/
rule +!orient(long X, long Y,string name) : ei.location(long A, long B) & ei.direction(string direction)  {
        
		//we will return A,B location
		//c.println("2 OBSERVE NORTH square facing  location x = "+ X +" y= "+ Y +". ");			
		
		//c.println("3.1 Pointing "+direction+" x = "+ A +" y= "+ B +"  ");			

		if (direction == "north") {


			if (name == "left") 			{	A = A-1; 			!makecontract(A,B);	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardLeft") 		{  A =A-1;	B =B-1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forward") 			{  B =B-1;  			!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardRight") 	{  A= A+1; B= B-1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "right") 			{  A= A+1; 				!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning....  .");			
				}
			
  			}
			
if (direction == "south") {

			if (name == "left") {  				A = A+1; 			!makecontract(A,B);	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardLeft") 		{  	A= A+1; B= B+1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forward") 			{  B =B+1;  			!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardRight") 	{  A= A-1; B= B+1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "right") 			{  A= A-1; 				!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			
  		}


if (direction == "east") {		

			if (name == "left") {  				B = B-1; 			!makecontract(A,B);	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning..... ");			
				 }
			if (name == "forwardLeft") 		{  	A= A+1;B= B-1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forward") 			{  A= A+1;	 			!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardRight") 	{  A= A+1;	B= B+1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "right") 			{  B= B+1; 				!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");	
					}
			
  		}


if (direction == "west") {	

			if (name == "left")				{  	B = B+1; 			!makecontract(A,B);	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardLeft") 		{  	A= A-1;	B= B+1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forward") 			{  A= A-1;				!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "forwardRight") 	{  A= A-1;	B= B-1;		!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");			
				}
			if (name == "right") 			{  B= B-1; 				!makecontract(A,B); 	
				//c.println("Square "+ name +", at "+ A +" y= "+ B +" auctioning.... . ");
					}
  		}


}
/*observer location, square they're looking at and direction of
observer, and output the square reference for the auction*/



rule +!clean(string name) : ~ei.square("here","dust")
    {
        c.println("ERROR no dust in " + name +" ." );
	
		
	
		s.sleep(5000);
		!decide();
		/*s.exit();*/
    }

rule +!clean(string name) 
    {
        c.println("ERROR 5.3 Can't clean here makes no sense in this square, decide again: " + name +" ." );
		
		
	
		s.sleep(5000);
		!decide();
		/*s.exit();*/
    }
   
rule +!clean() 
    {
        c.println("ERROR Can't clean here makes no sense in this square: ." );
		
		

		s.sleep(5000);
		!decide();
		/*s.exit();*/
    }
   




}