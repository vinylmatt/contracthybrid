agent Main {
    module Console c;
    module System s;
	module EIS ei;
    module Debug d;

	 types vac_ontology {
        formula vac(string);
		formula move(string, int );
		formula location_status(long, long, string);
		formula aheadfree(long, long);
	 	formula rightfree(long, long);
		formula leftfree(long, long);
	 }


	 inference aheadfree(long X, long Y) :- ~ei.square("forward","obstacle") | ei.square("forward","vac");
	 inference leftfree(long X, long Y) :- ~ei.square("left","obstacle") | ei.square("left","vac");
	 inference rightfree(long X, long Y) :- ~ei.square("right","obstacle") | ei.square("right","vac");

    initial vac([]);

	rule +!main(list args) {
		ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
		ei.init([generation("no")]);
		ei.join();
		ei.startEnv();

		list E = ei.freeEntities();
		forall(string ent : E) {
			c.println("E="+E);
		}
	    /*ei.link("Henry");
		ei.link("Decco");
		ei.link("Harry");*/
		ei.link("Lloyd");
	}

/*If there's dust clean it*/
rule +$ei.event(location(long A, long B)) : ei.square("here","dust") & ei.direction(string direction) 
    {
        c.println("1.0.1 this is CLEAN rule +$ei.event(location(int "+ A +", int "+ B +")) this agent at x= "+ A +". y= "+ B +" we are cleaning next here. ");
		!clean("here");
		c.println("1.0.2 CLEANed rule +$ei.event(location(int "+ A +", int "+ B +")) this agent at x= "+ A +". y= "+ B +" we are moving "+ direction +" next here. ");
		s.sleep(2000);
		!move(direction);
		c.println("1.0.3 we moved "+ direction +" after cleaning "+ A +", int "+ B +") ");
    }


rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ei.square("left","dust") & ei.direction(string direction)
    {
        c.println("1.3.1 filth to the left (long "+ A +", long "+ B +")) and facing "+ direction +" so we !move "+ direction +" ");
		!move("left");
		s.sleep(2000);
		!clean("here");
		s.sleep(2000);
    }

rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ei.square("right","dust") & ei.direction(string direction)
    {
        c.println("1.3.1 filth to the right from location(long "+ A +", long "+ B +")) and facing "+ direction +" so we !move "+ direction +" ");
		!move("right");
		s.sleep(2000);
		!clean("here");
		s.sleep(2000);
    }


rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ~ei.square("forward","obstacle") & ~ei.square("forward","vac") & ei.direction(string direction)
    {
        c.println("1.3.1 way is clear from location(long "+ A +", long "+ B +")) and facing "+ direction +" so we !move "+ direction +" ");
		!move(direction);
		s.sleep(2000);
    }


/*Dirt frontleft  to clean, blocked forward open left*/
rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ei.direction(string direction) & ei.square("forwardLeft","dust") 
    {
        c.println("1.1.1 this is frontleft dust RULE LEFT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		!move("left");
		s.sleep(2000);
		!move("right");
		c.println("1.1.2 this is TURN RULE LEFT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		s.sleep(2000);
	
		c.println("1.1.3 this is TURN RULE LEFTin an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		
		s.sleep(2000);
		!move(direction);
		c.println("1.1.4 this is TURN RULE LEFTin an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		

    }

/*Dirt frontleft  to clean, blocked forward open left*/
rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ei.direction(string direction) & ei.square("forwardRight","dust") 
    {
        c.println("1.1.1 this is forwardRight dust RULE LEFT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		!move("Right");
		s.sleep(2000);
		!move("left");
		c.println("1.1.2 this is TforwardRight LEFT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		s.sleep(2000);
	
		c.println("1.1.3 this is forwardRight LEFTin an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		
		s.sleep(2000);
		!move(direction);
		c.println("1.1.4 this is forwardRight LEFTin an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		

    }

/*Nothing to clean, blocked forward open left*/
rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ei.direction(string direction) & ~ei.square("left","obstacle") | ~ei.square("left","vac")
    {
        c.println("1.1.1 this is TURN RULE LEFT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		!move("left");
		c.println("1.1.2 this is TURN RULE LEFT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		s.sleep(2000);
	
		c.println("1.1.3 this is TURN RULE LEFTin an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		
		s.sleep(2000);
		!move(direction);
		c.println("1.1.4 this is TURN RULE LEFTin an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		

    }

/*Nothing to clean, open right*/
rule +$ei.event(location(long A, long B)) : ei.square("here","empty") & ei.direction(string direction) & ~ei.square("right","obstacle") | ~ei.square("right","vac")
    {
        c.println("1.2.1 this is TURN RULE RIGHT in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		!move("right");
		c.println("1.2.2 this is TURN RULE in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");
		s.sleep(2000);
		c.println("1.2.3 this is now !move from x= "+ A +". y= "+ B +". in direction is "+ direction +". ");
		!move(direction);
		s.sleep(2000);
		c.println("1.2.4 this is TURN RULE in an empty blocked square rule this agent at x= "+ A +". y= "+ B +". env direction is "+ direction +". ");

    }




rule +$ei.event(location(long A, long B)) : ei.direction(string direction)
    {
        c.println("1.4.1 this is rule +$ei.event(location(long "+ A +", long "+ B +")) this agent at x= "+ A +". y= "+ B +". and facing "+ direction +" ");
		d.dumpBeliefs();
		d.printStackTrace();
		s.exit();
		s.sleep(2000);
    }

/*Find our agent's  world from square reports */

rule +$ei.event(square(string name, string contents))  :  ei.direction("north") & ei.location(long A, long B)  {
        
		//here we write the world looking north
		c.println("2 OBSERVE NORTH square "+ name +", contents "+ contents +" facing  location x = "+ A +" y= "+ B +". ");
		
			c.println("3.1 Pointing NORTH x = "+ A +" y= "+ B +"  "); 

			if (name == "left") {  				A = A-1; 			+location_status(A, B, contents);	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". "); }
			if (name == "forwardLeft") 		{  A =A-1;	B =B-1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forward") 			{  B =B-1;  			+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forwardRight") 	{  A= A+1; B= B-1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "right") 			{  A= A+1; 			+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +" . ");}
			
  		}


rule +$ei.event(square(string name, string contents))  :  ei.direction("south") & ei.location(long A, long B)  {

		c.println("2 OBSERVE SOUTH square "+ name +", contents "+ contents +" facing  location x = "+ A +" y= "+ B +". ");
		
			c.println("3.2 Pointing SOUTH x = "+ A +" y= "+ B +"  "); 

			if (name == "left") {  				A = A+1; 			+location_status(A, B, contents);	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". "); }
			if (name == "forwardLeft") 		{  	A= A+1; B= B+1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forward") 			{  B =B+1;  			+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forwardRight") 	{  A= A-1; B= B+1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "right") 			{  A= A-1; 				+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +" . ");}
			
  		}


rule +$ei.event(square(string name, string contents))  :  ei.direction("east") & ei.location(long A, long B)  {

	c.println("2 OBSERVE EAST square "+ name +", contents "+ contents +" facing  location x = "+ A +" y= "+ B +". ");
		
			c.println("3.3 Pointing EAST x = "+ A +" y= "+ B +"  "); 

			if (name == "left") {  				B = B-1; 			+location_status(A, B, contents);	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". "); }
			if (name == "forwardLeft") 		{  	A= A+1;B= B-1;				+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forward") 			{  A= A+1;	 			+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forwardRight") 	{  A= A+1;	B= B+1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "right") 			{  B= B+1; 				+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +" . ");}
			
  		}


rule +$ei.event(square(string name, string contents))  :  ei.direction("west") & ei.location(long A, long B)  {
	c.println("2 OBSERVE WEST square "+ name +", contents "+ contents +" facing  location x = "+ A +" y= "+ B +". ");
		
			c.println("3.4 Pointing WEST x = "+ A +" y= "+ B +"  "); 

			if (name == "left") {  				B = B+1; 			+location_status(A, B, contents);	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". "); }
			if (name == "forwardLeft") 		{  	A= A-1;	B= B+1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forward") 			{  A= A-1;				+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "forwardRight") 	{  A= A-1;	B= B-1;		+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +". ");	}
			if (name == "right") 			{  B= B-1; 				+location_status(A, B, contents); 	
				c.println("Square "+ name +", from percept = "+ A +" y= "+ B +" write to status "+ contents +" . ");}
  		}


       


/*Robo rules clean*/


rule +!clean(string name) 
    {
        c.println("4.1 cleaning " + name +" ." );
		ei.clean(name);
		/*wait(ei.clean(name));*/
		s.sleep(1000);
		c.println("4.2 cleaned " + name +" ." );
		
    }



rule +!move(string direction) :  ei.direction(string d) & ~ei.square("forward","obstacle") & ~ei.square("forward","vac")
    {
        c.println("5.1.1 Moving direction "+ d +". move command was  " + direction +"  the way was clear" );
		/*d.dumpBeliefs();*/
		ei.move(d);
		wait(ei.move(d));
		c.println("5.1.2 I moved direction "+ d +"becasue the way was clear . " );

    }



rule +!move(string direction) :  ei.direction(string d) & ei.square("left","free") & ei.square("forward","obstacle") | ei.square("forward","vac")
    {
        c.println("5.2.1 Turning Left Operation int by attempted move in direction "+ direction +". env dir is  " + d +", trying move left" );
		ei.move("left");
		wait(ei.move("left"));
		s.sleep(1000);
		c.println("5.2.3 I called !move direction "+ direction +". env dir is  " + d +". ");


    }

rule +!move(string direction) :  ei.direction(string d) & ei.square("left","dust") & ei.square("forward","obstacle") | ei.square("forward","vac")
    {
        c.println("5.3.1 Turning Left Operation to eat dust int by attempted move in direction "+ direction +". env dir is  " + d +", trying move left" );
		ei.move("left");
		wait(ei.move("left"));
		s.sleep(1000);
		c.println("5.3.2 I called !move direction "+ direction +". env dir is  " + d +". ");

    }





rule +!move(string direction) :  ei.direction(string d) 
    {
        c.println("5.3.1 trap "+ d +". move command was  " + direction +" " );
				ei.move("left");
		wait(ei.move("left"));
		s.sleep(1000);
				ei.move("left");
		wait(ei.move("left"));
		s.sleep(1000);
		
		d.dumpBeliefs();
		d.printStackTrace();
		s.exit();
		ei.move(direction);
		wait(ei.move(direction));
		s.sleep(1000);

		c.println("5.2.2 I moved direction "+ d +". " );

    }


}


